const n=JSON.parse('{"key":"v-7d902d71","path":"/data/J2EE/Spring.html","title":"Spring","lang":"zh-CN","frontmatter":{"title":"Spring","index":true,"category":["使用指南"],"description":"问题总结： 问题1：required a single bean, but 2 were found: 问题场景： MQ中使用了两种类型的消息，事务消息和普通消息，要分别注入两个相同的Bean 问题原因： 项目中出现两个相同的Bean 解决方案： 在注解增加BeanName配置：@Bean(\\"ipKeyResolver\\")和@Primary,带@Primary注解的优先，表示是主Bean。 @Bean(\\"transactionMQProducer\\") MQProducer transactionMQProducer() { ... } @Primary @Bean(\\"defaultMQProducer\\") MQProducer defaultMQProducer() { ... } 消费者使用@Qualifier(\\"name\\")消费Bean @Autowired @Qualifier(\\"transactionMQProducer\\") private MQProducer producer; @Autowired @Qualifier(\\"defaultMQProducer\\") private MQProducer defaultMQProducer;","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/data/J2EE/Spring.html"}],["meta",{"property":"og:title","content":"Spring"}],["meta",{"property":"og:description","content":"问题总结： 问题1：required a single bean, but 2 were found: 问题场景： MQ中使用了两种类型的消息，事务消息和普通消息，要分别注入两个相同的Bean 问题原因： 项目中出现两个相同的Bean 解决方案： 在注解增加BeanName配置：@Bean(\\"ipKeyResolver\\")和@Primary,带@Primary注解的优先，表示是主Bean。 @Bean(\\"transactionMQProducer\\") MQProducer transactionMQProducer() { ... } @Primary @Bean(\\"defaultMQProducer\\") MQProducer defaultMQProducer() { ... } 消费者使用@Qualifier(\\"name\\")消费Bean @Autowired @Qualifier(\\"transactionMQProducer\\") private MQProducer producer; @Autowired @Qualifier(\\"defaultMQProducer\\") private MQProducer defaultMQProducer;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-11T15:09:55.000Z"}],["meta",{"property":"article:author","content":"Fearless"}],["meta",{"property":"article:modified_time","content":"2023-12-11T15:09:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-11T15:09:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Fearless\\"}]}"]]},"headers":[{"level":2,"title":"问题1：required a single bean, but 2 were found:","slug":"问题1-required-a-single-bean-but-2-were-found","link":"#问题1-required-a-single-bean-but-2-were-found","children":[{"level":3,"title":"问题场景：","slug":"问题场景","link":"#问题场景","children":[]},{"level":3,"title":"问题原因：","slug":"问题原因","link":"#问题原因","children":[]},{"level":3,"title":"解决方案：","slug":"解决方案","link":"#解决方案","children":[]},{"level":3,"title":"参考：","slug":"参考","link":"#参考","children":[]}]},{"level":2,"title":"问题2：怎么给类起别名","slug":"问题2-怎么给类起别名","link":"#问题2-怎么给类起别名","children":[{"level":3,"title":"问题场景：","slug":"问题场景-1","link":"#问题场景-1","children":[]},{"level":3,"title":"问题原因：","slug":"问题原因-1","link":"#问题原因-1","children":[]},{"level":3,"title":"解决方案：","slug":"解决方案-1","link":"#解决方案-1","children":[]}]}],"git":{"createdTime":1702307395000,"updatedTime":1702307395000,"contributors":[{"name":"pzy","email":"66700800@qq.com","commits":1}]},"readingTime":{"minutes":1.06,"words":317},"filePathRelative":"data/J2EE/Spring.md","localizedDate":"2023年12月11日","excerpt":"<h1> 问题总结：</h1>\\n<h2> 问题1：required a single bean, but 2 were found:</h2>\\n<h3> <strong>问题场景</strong>：</h3>\\n<ol>\\n<li>MQ中使用了两种类型的消息，事务消息和普通消息，要分别注入两个相同的Bean</li>\\n</ol>\\n<h3> 问题原因：</h3>\\n<p>项目中出现两个相同的Bean</p>\\n<h3> 解决方案：</h3>\\n<ol>\\n<li>\\n<p>在注解增加BeanName配置：<code>@Bean(\\"ipKeyResolver\\")</code>和<code>@Primary</code>,带@Primary注解的优先，表示是主Bean。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Bean</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"transactionMQProducer\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token class-name\\">MQProducer</span> <span class=\\"token function\\">transactionMQProducer</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>  \\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token annotation punctuation\\">@Primary</span>\\n<span class=\\"token annotation punctuation\\">@Bean</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"defaultMQProducer\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token class-name\\">MQProducer</span> <span class=\\"token function\\">defaultMQProducer</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>消费者使用<code>@Qualifier(\\"name\\")</code>消费Bean</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Autowired</span>\\n<span class=\\"token annotation punctuation\\">@Qualifier</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"transactionMQProducer\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">MQProducer</span> producer<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token annotation punctuation\\">@Autowired</span>\\n<span class=\\"token annotation punctuation\\">@Qualifier</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"defaultMQProducer\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">MQProducer</span> defaultMQProducer<span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","autoDesc":true}');export{n as data};
