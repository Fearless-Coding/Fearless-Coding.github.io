const n=JSON.parse('{"key":"v-4617a0bf","path":"/data/%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/%E7%AE%97%E6%B3%95.html","title":"算法","lang":"zh-CN","frontmatter":{"title":"算法","index":true,"category":["使用指南"],"description":"算法基础 想要了解算法我们得先了解算法中最为重要的基本复杂度，这里我们先了解一下时间复杂度、空间复杂度这两个概念。 时间复杂度 计算方式 /** * 衡量代码的执行速度：时间复杂度 * T(n) = 常数 ---&gt; 时间复杂度就为 O(1) * T(n) = 常数1 * n + 常数2 ---&gt; 时间复杂度就为 O(n), 也就是说常数1可以当做1处理,常数2可以忽略不计,所以时间复杂度为 n * T(n) = 5n^3 + 66n^2 + 33 ---&gt; 时间复杂度就为 O(n^3), 也就是保留n的次方数最大的那一项, 因为随着n的增大,后面的项远远不及n的最高次项大,所以可以直接省略 * 总结上面的规律我们得到,如何去判断时间复杂度： * T(n)是不是常数： * 是：时间复杂度为 O(1) * 否：时间复杂度为 O(保留T(n)的最高次项并且去掉最高次项的系数) * &lt;p&gt; * 例如: * 1.一段代码中没有循环语句,只有单独的几条语句时间复杂度就为 O(1) */ public class TimeComplexity { public static void main(String[] args) { print1(); print2(); } /** * 调用一次print1(),内部共执行2次语句 * T(n) = 2 ---&gt; 时间复杂度就为 O(1) * &lt;p&gt; * 当输入为n时，某段代码的总执行次数 * n为输入数据的大小 * &lt;/p&gt; */ public static int print1() { // 执行1次 System.out.println(\\"print1\\"); // 执行1次 return 0; } /** * 调用一次print2(),内部共执行3n+3次语句 * T(n) = 3n+3 ---&gt; 时间复杂度就为 O(n) * &lt;p&gt; * 当输入为n时，某段代码的总执行次数 * n为输入数据的大小 * &lt;/p&gt; */ public static int print2() { int n = 10; // i = 0 执行1次 // i &lt; n 执行n+1次 // i++ 执行n次 for (int i = 0; i &lt; n; i++) { // 执行n次 System.out.println(\\"print2:\\" + i); } // 执行1次 return 0; } /** * 调用一次print3(),内部共执行 n*(1*n) 次语句 * T(n) = n^2 + n ---&gt; 时间复杂度就为 O(n^2) * 由此我们可以得出,如果有α重循环,时间复杂度就为O(n^α) */ public static int print3() { int n = 10; // 执行n次 for (int i = 0; i &lt; n; i++) { // 执行 1 * n 次 for (int j = 0; j &lt; n; j++) { System.out.println(\\"print3:\\" + i); } } // 执行1次 return 0; } /** * 调用一次print3(),内部共执行 n^2+n 次语句 * T(n) = n^2 + n ---&gt; 时间复杂度就为 O(n^2) * 由此我们可以得出,如果有α重循环,时间复杂度就为O(n^α) */ public static void print4() { int n = 10; // 执行n^2次 for (int i = 0; i &lt; n; i++) { for (int j = 0; j &lt; n; j++) { System.out.println(\\"print4:\\" + i); } } // 执行n次 for (int i = 0; i &lt; n; i++) { System.out.println(\\"print4:\\" + i); } } /** * 调用一次print5(),内部调用选最长的链路作为时间复杂度的判断,那么时间复杂度就为 O(n^2) */ public static void print5(int n) { if (n &gt; 10) { // 执行n^2次 for (int i = 0; i &lt; n; i++) { for (int j = 0; j &lt; n; j++) { System.out.println(\\"print4:\\" + i); } } } else { // 执行n次 for (int i = 0; i &lt; n; i++) { System.out.println(\\"print4:\\" + i); } } } /** * 调用一次print6(),时间复杂度就为 O(n^2) * 像这样的外部循环一次内部循环就少一次的,只需要把n个里层循环执行的次数相加,就能得到总执行次数的不精确结果 * 当 i = 0 1 2 3 ... (n-2) (n-1) * T(n) = n (n-1) (n-2) (n-3) ... 2 1 * = n*(n-1) * = n^2-1 * = O(n^2) */ public static void print6(int n) { for (int i = 0; i &lt; n; i++) { for (int j = i; j &lt; n; j++) { System.out.println(\\"print6:\\" + i); } } } /** * 当n为8的时候,输出语句执行3次,i *= 2执行3次, i &lt; n执行(3+1)次,i = 0执行一次 * 3+3+(3+1)+1 * =3*3+2 * T(8) = 3 ----&gt; 2^3 = 8 * ----&gt; 2^T(8) = 8 * * * * 当n为16的时候,输出语句执行4次,i *= 2执行4次, i &lt; n执行(4+1)次,i = 0执行一次 * 4+4+(4+1)+1 * =3*4+2 * T(16) = 4 ----&gt; 2^4 = 16 * ----&gt; 2^T(16) = 16 * * * 2^T(n) = n * T(n) 就等于 log₂n * * 那么print7的时间复杂度就为 T(n) = 3log₂n + 2 = O(log₂n) */ public static void print7(int n) { for (int i = 0; i &lt; n; i *= 2) { System.out.println(\\"print6:\\" + i); } } }","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/data/%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:title","content":"算法"}],["meta",{"property":"og:description","content":"算法基础 想要了解算法我们得先了解算法中最为重要的基本复杂度，这里我们先了解一下时间复杂度、空间复杂度这两个概念。 时间复杂度 计算方式 /** * 衡量代码的执行速度：时间复杂度 * T(n) = 常数 ---&gt; 时间复杂度就为 O(1) * T(n) = 常数1 * n + 常数2 ---&gt; 时间复杂度就为 O(n), 也就是说常数1可以当做1处理,常数2可以忽略不计,所以时间复杂度为 n * T(n) = 5n^3 + 66n^2 + 33 ---&gt; 时间复杂度就为 O(n^3), 也就是保留n的次方数最大的那一项, 因为随着n的增大,后面的项远远不及n的最高次项大,所以可以直接省略 * 总结上面的规律我们得到,如何去判断时间复杂度： * T(n)是不是常数： * 是：时间复杂度为 O(1) * 否：时间复杂度为 O(保留T(n)的最高次项并且去掉最高次项的系数) * &lt;p&gt; * 例如: * 1.一段代码中没有循环语句,只有单独的几条语句时间复杂度就为 O(1) */ public class TimeComplexity { public static void main(String[] args) { print1(); print2(); } /** * 调用一次print1(),内部共执行2次语句 * T(n) = 2 ---&gt; 时间复杂度就为 O(1) * &lt;p&gt; * 当输入为n时，某段代码的总执行次数 * n为输入数据的大小 * &lt;/p&gt; */ public static int print1() { // 执行1次 System.out.println(\\"print1\\"); // 执行1次 return 0; } /** * 调用一次print2(),内部共执行3n+3次语句 * T(n) = 3n+3 ---&gt; 时间复杂度就为 O(n) * &lt;p&gt; * 当输入为n时，某段代码的总执行次数 * n为输入数据的大小 * &lt;/p&gt; */ public static int print2() { int n = 10; // i = 0 执行1次 // i &lt; n 执行n+1次 // i++ 执行n次 for (int i = 0; i &lt; n; i++) { // 执行n次 System.out.println(\\"print2:\\" + i); } // 执行1次 return 0; } /** * 调用一次print3(),内部共执行 n*(1*n) 次语句 * T(n) = n^2 + n ---&gt; 时间复杂度就为 O(n^2) * 由此我们可以得出,如果有α重循环,时间复杂度就为O(n^α) */ public static int print3() { int n = 10; // 执行n次 for (int i = 0; i &lt; n; i++) { // 执行 1 * n 次 for (int j = 0; j &lt; n; j++) { System.out.println(\\"print3:\\" + i); } } // 执行1次 return 0; } /** * 调用一次print3(),内部共执行 n^2+n 次语句 * T(n) = n^2 + n ---&gt; 时间复杂度就为 O(n^2) * 由此我们可以得出,如果有α重循环,时间复杂度就为O(n^α) */ public static void print4() { int n = 10; // 执行n^2次 for (int i = 0; i &lt; n; i++) { for (int j = 0; j &lt; n; j++) { System.out.println(\\"print4:\\" + i); } } // 执行n次 for (int i = 0; i &lt; n; i++) { System.out.println(\\"print4:\\" + i); } } /** * 调用一次print5(),内部调用选最长的链路作为时间复杂度的判断,那么时间复杂度就为 O(n^2) */ public static void print5(int n) { if (n &gt; 10) { // 执行n^2次 for (int i = 0; i &lt; n; i++) { for (int j = 0; j &lt; n; j++) { System.out.println(\\"print4:\\" + i); } } } else { // 执行n次 for (int i = 0; i &lt; n; i++) { System.out.println(\\"print4:\\" + i); } } } /** * 调用一次print6(),时间复杂度就为 O(n^2) * 像这样的外部循环一次内部循环就少一次的,只需要把n个里层循环执行的次数相加,就能得到总执行次数的不精确结果 * 当 i = 0 1 2 3 ... (n-2) (n-1) * T(n) = n (n-1) (n-2) (n-3) ... 2 1 * = n*(n-1) * = n^2-1 * = O(n^2) */ public static void print6(int n) { for (int i = 0; i &lt; n; i++) { for (int j = i; j &lt; n; j++) { System.out.println(\\"print6:\\" + i); } } } /** * 当n为8的时候,输出语句执行3次,i *= 2执行3次, i &lt; n执行(3+1)次,i = 0执行一次 * 3+3+(3+1)+1 * =3*3+2 * T(8) = 3 ----&gt; 2^3 = 8 * ----&gt; 2^T(8) = 8 * * * * 当n为16的时候,输出语句执行4次,i *= 2执行4次, i &lt; n执行(4+1)次,i = 0执行一次 * 4+4+(4+1)+1 * =3*4+2 * T(16) = 4 ----&gt; 2^4 = 16 * ----&gt; 2^T(16) = 16 * * * 2^T(n) = n * T(n) 就等于 log₂n * * 那么print7的时间复杂度就为 T(n) = 3log₂n + 2 = O(log₂n) */ public static void print7(int n) { for (int i = 0; i &lt; n; i *= 2) { System.out.println(\\"print6:\\" + i); } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-11T15:09:55.000Z"}],["meta",{"property":"article:author","content":"Fearless"}],["meta",{"property":"article:modified_time","content":"2023-12-11T15:09:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-11T15:09:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Fearless\\"}]}"]]},"headers":[{"level":2,"title":"时间复杂度","slug":"时间复杂度","link":"#时间复杂度","children":[{"level":3,"title":"计算方式","slug":"计算方式","link":"#计算方式","children":[]},{"level":3,"title":"时间复杂度对比","slug":"时间复杂度对比","link":"#时间复杂度对比","children":[]},{"level":3,"title":"举个栗子","slug":"举个栗子","link":"#举个栗子","children":[]}]},{"level":2,"title":"空间复杂度","slug":"空间复杂度","link":"#空间复杂度","children":[]}],"git":{"createdTime":1702307395000,"updatedTime":1702307395000,"contributors":[{"name":"pzy","email":"66700800@qq.com","commits":1}]},"readingTime":{"minutes":5.28,"words":1583},"filePathRelative":"data/自我修养/算法.md","localizedDate":"2023年12月11日","excerpt":"<h1> 算法基础</h1>\\n<p>想要了解算法我们得先了解算法中最为重要的基本复杂度，这里我们先了解一下时间复杂度、空间复杂度这两个概念。</p>\\n<h2> 时间复杂度</h2>\\n<h3> 计算方式</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token doc-comment comment\\">/**\\n * 衡量代码的执行速度：时间复杂度\\n * T(n) = 常数  ---&gt;  时间复杂度就为 O(1)\\n * T(n) = 常数1 * n + 常数2  ---&gt;  时间复杂度就为 O(n), 也就是说常数1可以当做1处理,常数2可以忽略不计,所以时间复杂度为 n\\n * T(n) = 5n^3 + 66n^2 + 33  ---&gt;  时间复杂度就为 O(n^3), 也就是保留n的次方数最大的那一项, 因为随着n的增大,后面的项远远不及n的最高次项大,所以可以直接省略\\n * 总结上面的规律我们得到,如何去判断时间复杂度：\\n * T(n)是不是常数：\\n * 是：时间复杂度为 O(1)\\n * 否：时间复杂度为 O(保留T(n)的最高次项并且去掉最高次项的系数)\\n * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n * 例如:\\n * 1.一段代码中没有循环语句,只有单独的几条语句时间复杂度就为 O(1)\\n */</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TimeComplexity</span> <span class=\\"token punctuation\\">{</span>\\n\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">print1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">print2</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 调用一次print1(),内部共执行2次语句\\n     * T(n) = 2  ---&gt;  时间复杂度就为 O(1)\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * 当输入为n时，某段代码的总执行次数\\n     * n为输入数据的大小\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">print1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 执行1次</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"print1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 执行1次</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 调用一次print2(),内部共执行3n+3次语句\\n     * T(n) = 3n+3  ---&gt;  时间复杂度就为 O(n)\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * 当输入为n时，某段代码的总执行次数\\n     * n为输入数据的大小\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">print2</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> n <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// i = 0 执行1次</span>\\n        <span class=\\"token comment\\">// i &lt; n 执行n+1次</span>\\n        <span class=\\"token comment\\">// i++   执行n次</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 执行n次</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"print2:\\"</span> <span class=\\"token operator\\">+</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// 执行1次</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 调用一次print3(),内部共执行 n*(1*n) 次语句\\n     * T(n) = n^2 + n  ---&gt;  时间复杂度就为 O(n^2)\\n     * 由此我们可以得出,如果有α重循环,时间复杂度就为O(n^α)\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">print3</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> n <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 执行n次</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 执行 1 * n 次</span>\\n            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> j <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"print3:\\"</span> <span class=\\"token operator\\">+</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// 执行1次</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 调用一次print3(),内部共执行 n^2+n 次语句\\n     * T(n) = n^2 + n  ---&gt;  时间复杂度就为 O(n^2)\\n     * 由此我们可以得出,如果有α重循环,时间复杂度就为O(n^α)\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">print4</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> n <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 执行n^2次</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> j <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"print4:\\"</span> <span class=\\"token operator\\">+</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// 执行n次</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"print4:\\"</span> <span class=\\"token operator\\">+</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 调用一次print5(),内部调用选最长的链路作为时间复杂度的判断,那么时间复杂度就为 O(n^2)\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">print5</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 执行n^2次</span>\\n            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> j <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"print4:\\"</span> <span class=\\"token operator\\">+</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 执行n次</span>\\n            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"print4:\\"</span> <span class=\\"token operator\\">+</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 调用一次print6(),时间复杂度就为 O(n^2)\\n     * 像这样的外部循环一次内部循环就少一次的,只需要把n个里层循环执行的次数相加,就能得到总执行次数的不精确结果\\n     * 当 i = 0     1     2     3   ...  (n-2)    (n-1)\\n     * T(n) = n  (n-1) (n-2) (n-3)  ...   2        1\\n     *      = n*(n-1)\\n     *      = n^2-1\\n     *      = O(n^2)\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">print6</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> j <span class=\\"token operator\\">=</span> i<span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"print6:\\"</span> <span class=\\"token operator\\">+</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 当n为8的时候,输出语句执行3次,i *= 2执行3次, i &lt; n执行(3+1)次,i = 0执行一次\\n     *  3+3+(3+1)+1\\n     * =3*3+2\\n     * T(8) = 3 ----&gt; 2^3 = 8\\n     *          ----&gt; 2^T(8) = 8\\n     *\\n     *\\n     *\\n     * 当n为16的时候,输出语句执行4次,i *= 2执行4次, i &lt; n执行(4+1)次,i = 0执行一次\\n     * 4+4+(4+1)+1\\n     * =3*4+2\\n     * T(16) = 4 ----&gt; 2^4 = 16\\n     *           ----&gt; 2^T(16) = 16\\n     *\\n     *\\n     * 2^T(n) = n\\n     * T(n) 就等于 log₂n\\n     *\\n     * 那么print7的时间复杂度就为 T(n) = 3log₂n + 2 = O(log₂n)\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">print7</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">*=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"print6:\\"</span> <span class=\\"token operator\\">+</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
