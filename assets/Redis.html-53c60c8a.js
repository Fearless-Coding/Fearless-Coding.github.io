import{_ as s,o as a,c as e,e as t}from"./app-0665999f.js";const p="/assets/e7cd7b899e510fb3aa8c05042b22c093d0430ca7-8b76cde5.jpeg",o="/assets/023b5bb5c9ea15cefb035bc8431132f53b87b21e-8ebf87cb.jpeg",i="/assets/1c950a7b02087bf43b4490d50ac25f2a11dfcf7e-ff106258.jpeg",l="/assets/32fa828ba61ea8d3c2502e396b1b3848251f58b0-b8544c0c.jpeg",c="/assets/09fa513d269759ee28454d2c4cea4b106c22dfd3-61ca9304.jpeg",r="/assets/b17eca8065380cd7df69859ba056a5325982816c-c2eefd6b.jpeg",u="/assets/8326cffc1e178a82c532308ef2117b8ba977e8ae-48da7d90.jpeg",d="/assets/1120165-20200210163639369-1861604133-6bcac3b8.png",k="/assets/1120165-20200210163723019-1037639332-ffdb912e.png",n="/assets/1120165-20200210201842784-528299150-e0d6ee9e.png",m="/assets/1120165-20200210202309053-1947340550-c0a08515.png",b="/assets/1120165-20200211122445582-11189433-ff84d7df.png",v="/assets/1120165-20200808214325134-1676845673-613c4baa.png",g="/assets/1120165-20200808214359739-1247536410-958ba76a.png",h="/assets/1120165-20200329215008122-335003416-0a1d8aed.png",f="/assets/1120165-20200330220824117-1290183653-04899a53.png",q="/assets/1120165-20200330221613591-2062171492-aa147fc5.png",y="/assets/1120165-20200404213453130-714545258-27498617.png",R="/assets/1120165-20200404214003953-5622706-1511f037.png",E="/assets/1120165-20200404214216788-374691466-1d67457a.png",w="/assets/1120165-20200404214812688-1075855704-c09247e4.png",x={},_=t(`<h1 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h1><p>Redis是一个开源( BSD许可)的,内存中的数据结构存储系统,它可以用作<strong>数据库、缓存和消息中间件MQ</strong>。它支持多种类型的数据结构,如字符串( strings)，散列( hashes) ,列表(lists)，集合(sets)，有序集合( sorted sets)与范围查询,bitmaps，hyperloglogs和地理空间( geospatial )索引半径查询。Redis 内置了复制(replication) , LUA脚本( Luascripting)，LRU驱动事件( LRU eviction) , 事务( transactions )和不同级别的磁盘持久化( persistence )， 并通过Redis哨兵( Sentinel )和自动分区( Cluster )提供高可用性( high availability)。</p><h1 id="基础命令的使用" tabindex="-1"><a class="header-anchor" href="#基础命令的使用" aria-hidden="true">#</a> 基础命令的使用</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;a6d67fc760183455c4873edbe90feccd&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;54387c3e9203809d6bb0288274769c43&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;oauth:client:details::web&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;5db802e935ab9bb62593d914b8bc1e26&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> flushdb		<span class="token comment"># 清除db内的所有数据</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> name pzy	<span class="token comment"># 设置一个值</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *		<span class="token comment"># 查看所有的key</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name	<span class="token comment"># 获取key所对应的值</span>
<span class="token string">&quot;pzy&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> EXISTS name		<span class="token comment"># 查看是否存在此key</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MOVE name <span class="token number">1</span>		<span class="token comment"># 移除key</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> EXPIRE name <span class="token number">10</span>	<span class="token comment"># 设置key的过期时间</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name		<span class="token comment"># 查询key还有多长时间过期</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name		<span class="token comment"># 值为-2时说明key已经过期</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token parameter variable">-2</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name		<span class="token comment"># 过期后key的值为nil</span>
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">type</span> name		<span class="token comment"># 获取key的类型</span>
string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="string-字符串" tabindex="-1"><a class="header-anchor" href="#string-字符串" aria-hidden="true">#</a> String（字符串）</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> append name <span class="token number">123</span>		<span class="token comment"># 在值的后面追加字符串，如果当前key不存在就相当于setkey</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name
<span class="token string">&quot;pzy123&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> strlen name			<span class="token comment"># 获取字符串的长度</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> view <span class="token number">0</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get view
<span class="token string">&quot;0&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incr view			<span class="token comment"># 自增1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incr view
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get view
<span class="token string">&quot;2&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> decr view			<span class="token comment"># 自减1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> decr view
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get view
<span class="token string">&quot;0&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> INCRBY view <span class="token number">10</span>		<span class="token comment"># 可以设置步长设置增量</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> INCRBY view <span class="token number">10</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">20</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> DECRBY view <span class="token number">10</span>		<span class="token comment"># 可以设置步长设置减量</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GETRANGE name <span class="token number">0</span> <span class="token number">3</span>	<span class="token comment"># 截取字符串的长度，下标从0开始</span>
<span class="token string">&quot;pzy1&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETRANGE name <span class="token number">3</span> <span class="token number">666</span>	<span class="token comment"># 替换指定位置开始的值</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name
<span class="token string">&quot;pzy666&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setex age <span class="token number">30</span> <span class="token string">&quot;100&quot;</span>	<span class="token comment"># 设置一个值并且设置过期时间（set with expire）</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age
<span class="token string">&quot;100&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl age				
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">16</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setnx age <span class="token number">1000</span>		<span class="token comment"># 不存在这个key才会去设置值（set if not exist）,分布式锁中会常常使用 </span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age
<span class="token string">&quot;100&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> mset k1 v1 k2 v2 k3 v3		<span class="token comment"># 量设置值</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;k2&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;k1&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;k3&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> mget k1 k2 k3				<span class="token comment">#批量获取值</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;v1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;v2&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;v3&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> msetnx k1 v1 k5 v5			<span class="token comment"># 是一个原子性操作,要么一起成功，要么一起失败</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;k2&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;k1&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;k3&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> mset user:1:name pzy user:1:age <span class="token number">20</span>		<span class="token comment"># 设置一个key，中间冒号隔开，在项目中可以分组区分是哪个模块下的缓存</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> mget user:1:name user:1:age				<span class="token comment"># 获取也可以使用这种key的方式获取值</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;pzy&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;20&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getset db redis							<span class="token comment"># 先get旧值再set新值，如果不存在值为nil</span>
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get db
<span class="token string">&quot;redis&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getset db mongdb
<span class="token string">&quot;redis&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="list-列表" tabindex="-1"><a class="header-anchor" href="#list-列表" aria-hidden="true">#</a> List（列表）</h1><p>在redis里面，可以把list玩成栈、队列、阻塞队列</p><p>所有list命令都是用L开头的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LPUSH list one two three		<span class="token comment"># 往list中插入值，插入到列表头部</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LRANGE list <span class="token number">0</span> <span class="token parameter variable">-1</span>				<span class="token comment"># 获取list中的全部值</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;three&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;two&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;one&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LRANGE list <span class="token number">0</span> <span class="token number">1</span>					<span class="token comment"># 获取下标[0,1]的值</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;three&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;two&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> RPUSH list zero					<span class="token comment"># 往list中插入值，插入到列表尾部</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LRANGE list <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;three&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;two&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;one&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;zero&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LPOP list						<span class="token comment"># 移除头部一个值（第一个值）</span>
<span class="token string">&quot;three&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> RPOP list						<span class="token comment"># 移除尾部一个值（最后一个值）</span>
<span class="token string">&quot;zero&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LRANGE list <span class="token number">0</span> <span class="token parameter variable">-1</span>			
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;two&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;one&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LINDEX list <span class="token number">1</span>					<span class="token comment"># 通过下标获取list中的某一个值	</span>
<span class="token string">&quot;one&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LINDEX list <span class="token number">0</span>
<span class="token string">&quot;two&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LLEN list						<span class="token comment"># 获取list长度</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LPUSH list zero three three
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LRANGE list <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;three&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;three&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;zero&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;two&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;one&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LREM list <span class="token number">1</span> one					<span class="token comment"># 移除一个值为one的元素</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LREM list <span class="token number">1</span> three				<span class="token comment"># 移除一个值为three的元素（参数3为移除个数）</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LRANGE list <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;three&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;zero&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;two&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LTRIM list <span class="token number">1</span> <span class="token number">2</span>					<span class="token comment"># 通过下标截取指定长度，并重新赋值到list中</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LRANGE list <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;zero&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;two&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> RPOPLPUSH list mylist			<span class="token comment"># 将list中的最后一个元素移除，并添加到新的集合中</span>
<span class="token string">&quot;two&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LRANGE list <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;zero&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LRANGE mylist <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;two&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LSET list <span class="token number">0</span> item				<span class="token comment"># 将指定下标的元素替换，下标不存在报错</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LRANGE list <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;item&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LINSERT list before item hello	<span class="token comment"># 将某个值插入到集合某元素前面</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LINSERT list after item world	<span class="token comment"># 将某个值插入到集合某元素后面</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LRANGE list <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;hello&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;item&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="set-集合" tabindex="-1"><a class="header-anchor" href="#set-集合" aria-hidden="true">#</a> Set（集合）</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SADD <span class="token builtin class-name">set</span> hello zhangsan lisi wangwu			<span class="token comment"># 往set集合中添加元素</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SMEMBERS <span class="token builtin class-name">set</span>								<span class="token comment"># 查看set中的所有值</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;hello&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;zhangsan&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;lisi&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SISMEMBER <span class="token builtin class-name">set</span> hello							<span class="token comment"># 判断某一个值存不存在，存在返回1，不存在返回0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SISMEMBER <span class="token builtin class-name">set</span> world
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SCARD <span class="token builtin class-name">set</span>									<span class="token comment"># 获取set的长度</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SREM <span class="token builtin class-name">set</span> hello								<span class="token comment"># 移除set中的指定元素</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SMEMBERS <span class="token builtin class-name">set</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;zhangsan&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;lisi&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SRANDMEMBER <span class="token builtin class-name">set</span>								<span class="token comment"># 随机获取指定个数个值，默认取一个</span>
<span class="token string">&quot;lisi&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SRANDMEMBER <span class="token builtin class-name">set</span>
<span class="token string">&quot;lisi&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SRANDMEMBER <span class="token builtin class-name">set</span>
<span class="token string">&quot;zhangsan&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SRANDMEMBER <span class="token builtin class-name">set</span> <span class="token number">2</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;lisi&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SPOP <span class="token builtin class-name">set</span>									<span class="token comment"># 随机删除指定个数个值，默认取一个</span>
<span class="token string">&quot;lisi&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SMEMBERS <span class="token builtin class-name">set</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;zhangsan&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SMOVE <span class="token builtin class-name">set</span> myset wangwu						<span class="token comment"># 将指定元素从一个集合移动到另外一个集合</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SMEMBERS <span class="token builtin class-name">set</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;zhangsan&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SMEMBERS myset
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SADD <span class="token builtin class-name">set</span> wangwu
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SDIFF <span class="token builtin class-name">set</span> myset								<span class="token comment"># 差集</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;zhangsan&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SINTER <span class="token builtin class-name">set</span> myset							<span class="token comment"># 交集</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SUNION <span class="token builtin class-name">set</span> myset							<span class="token comment"># 并集</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;zhangsan&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="hash-哈希" tabindex="-1"><a class="header-anchor" href="#hash-哈希" aria-hidden="true">#</a> Hash（哈希）</h1><p>相当于Map</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HSET myhash key1 val1					<span class="token comment"># 设置hash值</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hget myhash key1						<span class="token comment"># 获取一个hash值</span>
<span class="token string">&quot;val1&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HMSET myhash key1 hello key2 world		<span class="token comment"># 批量设置hash值</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HMGET myhash key1 key2					<span class="token comment"># 批量获取hash值</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;hello&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;world&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HGETALL myhash							<span class="token comment"># 获取全部的hash值</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;key1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;hello&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;key2&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;world&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HDEL myhash key2						<span class="token comment"># 删除指定的hash值</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HGETALL myhash
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;key1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;hello&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HLEN myhash								<span class="token comment"># 获取hash的长度</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HEXISTS myhash key1						<span class="token comment">#  判断某一个值存不存在，存在返回1，不存在返回0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HEXISTS myhash key2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HKEYS myhash							<span class="token comment"># 获取hash中的所以key</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;key1&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HVALS myhash							<span class="token comment"># 获取hash中的所以value</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;hello&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HSET myhash key2 <span class="token number">5</span>						<span class="token comment"># 设置一个数值类型的hash</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HINCRBY myhash key2 <span class="token number">1</span>					<span class="token comment"># value加一</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HINCRBY myhash key2 <span class="token parameter variable">-1</span>					<span class="token comment"># value减一</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HSETNX myhash key3 hello				<span class="token comment"># 设置一个hash值，如果不存在则添加，如果存在则不改变值</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HSETNX myhash key3 world
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HGET key3
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR wrong number of arguments <span class="token keyword">for</span> <span class="token string">&#39;hget&#39;</span> <span class="token builtin class-name">command</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HGET myhash key3
<span class="token string">&quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="zset-有序集合" tabindex="-1"><a class="header-anchor" href="#zset-有序集合" aria-hidden="true">#</a> Zset（有序集合）</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZADD zset <span class="token number">1</span> val1 <span class="token number">2</span> val2 <span class="token number">3</span> val3		<span class="token comment"># 设置zset值</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>	
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANGE zset <span class="token number">0</span> <span class="token parameter variable">-1</span>					<span class="token comment"># 获取所有的zset值	</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;val1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;val2&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;val3&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zadd salary <span class="token number">5000</span> zhangsan <span class="token number">8000</span> liai <span class="token number">4000</span> wangwu		
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANGEBYSCORE salary <span class="token parameter variable">-inf</span> +inf		<span class="token comment"># 排序从负无穷到正无穷(也就是从小到大排序)</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;zhangsan&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;liai&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANGEBYSCORE salary <span class="token parameter variable">-inf</span> +inf withscores		<span class="token comment"># 显示用户全部信息,从小到大</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;4000&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;zhangsan&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;5000&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;liai&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;8000&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANGEBYSCORE salary <span class="token parameter variable">-inf</span> <span class="token number">5000</span> withscores		 
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;4000&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;zhangsan&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;5000&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZREVRANGE salary <span class="token number">0</span> <span class="token parameter variable">-1</span>				<span class="token comment"># 从大到小排序</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;liai&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;zhangsan&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANGE zset <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;val1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;val2&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;val3&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZREM zset val3						<span class="token comment"># 移除某一元素</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANGE zset <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;val1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;val2&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZCARD zset							<span class="token comment"># 获取zset的长度</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZCOUNT zset <span class="token parameter variable">-inf</span> +inf				<span class="token comment"># 获取指定区间的数量</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="三种特殊类型" tabindex="-1"><a class="header-anchor" href="#三种特殊类型" aria-hidden="true">#</a> 三种特殊类型</h1><h3 id="地理空间-geospatial" tabindex="-1"><a class="header-anchor" href="#地理空间-geospatial" aria-hidden="true">#</a> 地理空间( geospatial )</h3><p>底层基于zset，所以可以使用zset的命令移除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEOADD china:city <span class="token number">116.397128</span> <span class="token number">39.916527</span> beijing		<span class="token comment"># 添加地理位置(经度 纬度 名称)</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEOADD china:city <span class="token number">121.48941</span> <span class="token number">31.40527</span> shanghai
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEOADD china:city <span class="token number">106.54041</span> <span class="token number">29.40268</span> chongqing
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEOADD china:city <span class="token number">113.88308</span> <span class="token number">22.55329</span> shenzhen
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEOADD china:city <span class="token number">87.615653</span> <span class="token number">43.831501</span> xinjiang
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEOPOS china:city shanghai							<span class="token comment"># 获取某个值,可以获取多个值 </span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;121.4894101023674&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;31.405269938483805&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEODIST china:city chongqing xinjiang km			<span class="token comment"># 获取两个经纬度之间的距离,单位为km,默认是m,(还可以使用mi英里ft英尺)</span>
<span class="token string">&quot;2319.5814&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km					<span class="token comment"># 获取以100,30这个经纬度为中心,1000km内的城市</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;chongqing&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;shenzhen&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km withcoord withdist count <span class="token number">1</span>  <span class="token comment"># 获取以100,30这个经纬度为中心,1000km内的城市具体经纬度,限制显示的个数</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;chongqing&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;340.7667&quot;</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;106.54040783643723&quot;</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;29.402680535172998&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEORADIUSBYMEMBER china:city shanghai <span class="token number">2000</span> km		<span class="token comment"># 找出位于指定元素周围的其他元素</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;chongqing&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;shenzhen&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;shanghai&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEOHASH china:city shanghai chongqing				<span class="token comment"># 返回一个或多个位置元素的hash值,11位的hash</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wtw6st1uuq0&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;wm5z22s7520&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANGE china:city <span class="token number">0</span> <span class="token parameter variable">-1</span>								<span class="token comment"># 查询当前所以位置			</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;xinjiang&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;chongqing&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;shenzhen&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;shanghai&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZREM china:city shanghai							<span class="token comment"># 移除某个位置</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANGE china:city <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;xinjiang&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;chongqing&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;shenzhen&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hyperloglog" tabindex="-1"><a class="header-anchor" href="#hyperloglog" aria-hidden="true">#</a> HyperLogLog</h3><p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。 Redis 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。 在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。但是，<strong>因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</strong><strong>什么是基数?</strong> 比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFADD mykey a b c d e f g			<span class="token comment"># 设置HyperLogLog值</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFCOUNT mykey						<span class="token comment"># 查询HyperLogLog的基数</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFADD mykey2 a b c d
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFCOUNT mykey2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFMERGE mykey3 mykey mykey2			<span class="token comment"># 合并mykey、mykey2到mykey3中</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFCOUNT mykey3
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bitmap" tabindex="-1"><a class="header-anchor" href="#bitmap" aria-hidden="true">#</a> bitmap</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETBIT sign <span class="token number">0</span> <span class="token number">1</span>			<span class="token comment"># 设置bitmap值</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETBIT sign <span class="token number">1</span> <span class="token number">0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETBIT sign <span class="token number">2</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETBIT sign <span class="token number">3</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GETBIT sign <span class="token number">3</span>			<span class="token comment"># 获取bitmap值</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GETBIT sign <span class="token number">0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> BITCOUNT sign			<span class="token comment"># 统计值为1的数量</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h1><p>Redis中没有隔离级别的概念</p><p>Redis中单条命令是保证原子性的，但是事务不保证原子性。（有运行时异常不会回滚）</p><p>正常执行事务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI			<span class="token comment"># 开启事务</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> k1 v1		
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> k2 v2
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get k1
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exec</span>			<span class="token comment"># 执行事务</span>
<span class="token number">1</span><span class="token punctuation">)</span> OK
<span class="token number">2</span><span class="token punctuation">)</span> OK
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;v1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>放弃事务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> k1 v1
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> discard			<span class="token comment"># 放弃事务</span>
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译型异常（命令有误！）事务中的所以命令都不会执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> k1 v1
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getset k2		<span class="token comment"># 命令有误</span>
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR wrong number of arguments <span class="token keyword">for</span> <span class="token string">&#39;getset&#39;</span> <span class="token builtin class-name">command</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exec</span>			<span class="token comment"># 执行事务报错</span>
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> EXECABORT Transaction discarded because of previous errors.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行时异常（1/0）如果事务队列中存在语法性错误，那么执行命令的时候，其他命令可以正常执行，错误命令抛出异常：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get k1
<span class="token string">&quot;v1&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get k1
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incr k1			<span class="token comment"># 错误语法，在字符串上加1</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> k3 v3
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exec</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;v1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range
<span class="token number">3</span><span class="token punctuation">)</span> OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="乐观锁watch监控" tabindex="-1"><a class="header-anchor" href="#乐观锁watch监控" aria-hidden="true">#</a> 乐观锁watch监控</h1><p>Redis中watch可以当做乐观锁去操作</p><p>正常执行：事务正常执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> money <span class="token number">100</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> out <span class="token number">20</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">watch</span> money			<span class="token comment"># 监视 money对象</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> decrby money <span class="token number">20</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby out <span class="token number">20</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exec</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">80</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">20</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多线程修改测试：事务提交失败</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">watch</span> money			<span class="token comment"># 监视 money对象</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI -
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> decrby money <span class="token number">20</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby out <span class="token number">20</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exec</span>				<span class="token comment"># 执行之前，另外一个线程修改了money的值，这个时候就会导致事务提交失败</span>
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>失败解决方案：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> UNWATCH				<span class="token comment"># 先解锁</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">watch</span> money			<span class="token comment"># 获取money的最新值在进行监视</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI -
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> decrby money <span class="token number">10</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby out <span class="token number">10</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exec</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">190</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="jedis" tabindex="-1"><a class="header-anchor" href="#jedis" aria-hidden="true">#</a> Jedis</h1><p>Redis官方推荐的Java连接工具</p><p>1、导入对应的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、编码测试</p><ul><li><p>​ 连接Redis</p></li><li><p>​ 操作命令</p></li><li><p>​ 断开连接</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ping</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;连接成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//查看服务是否运行</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务正在运行: &quot;</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>连接成功
服务正在运行: PONG
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="springboot整合" tabindex="-1"><a class="header-anchor" href="#springboot整合" aria-hidden="true">#</a> SpringBoot整合</h1><p>spring2.X中默认使用的lettuce客户端</p><p>https://blog.csdn.net/yeyinglingfeng/article/details/87790700 写的非常详细说明spring2.X中客户端使用</p><h1 id="springboot2-0-集成redis服务详解-以及-lettuce-jedis" tabindex="-1"><a class="header-anchor" href="#springboot2-0-集成redis服务详解-以及-lettuce-jedis" aria-hidden="true">#</a> springboot2.0 集成redis服务详解，以及 (Lettuce &amp; Jedis)</h1><p>https://blog.csdn.net/zzhongcy/article/details/102584028</p><h1 id="redis持久化" tabindex="-1"><a class="header-anchor" href="#redis持久化" aria-hidden="true">#</a> Redis持久化</h1><p>redis是一个内存数据库，数据保存在内存中，但是我们都知道内存的数据变化是很快的，也容易发生丢失。幸好Redis还为我们提供了持久化的机制，分别是RDB(Redis DataBase)和AOF(Append Only File)。</p><blockquote><p>在这里假设你已经了解了redis的基础语法，某字母网站都有很好的教程，可以去看。基本使用的文章就不写了，都是一些常用的命令。</p></blockquote><p>下面针对这两种方式来介绍一下。由浅入深。</p><h3 id="一、持久化流程" tabindex="-1"><a class="header-anchor" href="#一、持久化流程" aria-hidden="true">#</a> <strong>一、持久化流程</strong></h3><p>既然redis的数据可以保存在磁盘上，那么这个流程是什么样的呢？</p><p>要有下面五个过程：</p><p>（1）客户端向服务端发送写操作(数据在客户端的内存中)。</p><p>（2）数据库服务端接收到写请求的数据(数据在服务端的内存中)。</p><p>（3）服务端调用write这个系统调用，将数据往磁盘上写(数据在系统内存的缓冲区中)。</p><p>（4）操作系统将缓冲区中的数据转移到磁盘控制器上(数据在磁盘缓存中)。</p><p>（5）磁盘控制器将数据写到磁盘的物理介质中(数据真正落到磁盘上)。</p><p>这5个过程是在理想条件下一个正常的保存流程，但是在大多数情况下，我们的机器等等都会有各种各样的故障，这里划分了两种情况：</p><p>（1）Redis数据库发生故障，只要在上面的第三步执行完毕，那么就可以持久化保存，剩下的两步由操作系统替我们完成。</p><p>（2）操作系统发生故障，必须上面5步都完成才可以。</p><p>在这里只考虑了保存的过程可能发生的故障，其实保存的数据也有可能发生损坏，需要一定的恢复机制，不过在这里就不再延伸了。现在主要考虑的是redis如何来实现上面5个保存磁盘的步骤。它提供了两种策略机制，也就是RDB和AOF。</p><h3 id="二、rdb机制" tabindex="-1"><a class="header-anchor" href="#二、rdb机制" aria-hidden="true">#</a> <strong>二、RDB机制</strong></h3><p>RDB其实就是把数据以快照的形式保存在磁盘上。什么是快照呢，你可以理解成把当前时刻的数据拍成一张照片保存下来。</p><p>RDB持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘。也是默认的持久化方式，这种方式是就是将内存中数据以快照的方式写入到二进制文件中,默认的文件名为dump.rdb。</p><blockquote><p>在我们安装了redis之后，所有的配置都是在redis.conf文件中，里面保存了RDB和AOF两种持久化机制的各种配置。</p></blockquote><p>既然RDB机制是通过把某个时刻的所有数据生成一个快照来保存，那么就应该有一种触发机制，是实现这个过程。对于RDB来说，提供了三种机制：save、bgsave、自动化。我们分别来看一下</p><p><strong>1、save触发方式</strong></p><p>该命令会阻塞当前Redis服务器，执行save命令期间，Redis不能处理其他命令，直到RDB过程完成为止。具体流程如下：</p><p><img src="`+p+'" alt="img"></p><p>执行完成时候如果存在老的RDB文件，就把新的替代掉旧的。我们的客户端可能都是几万或者是几十万，这种方式显然不可取。</p><p><strong>2、bgsave触发方式</strong></p><p>执行该命令时，Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。具体流程如下：</p><p><img src="'+o+`" alt="img"></p><p>具体操作是Redis进程执行fork操作创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短。基本上 Redis 内部所有的RDB操作都是采用 bgsave 命令。</p><p><strong>3、自动触发</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> FLUSHALL	<span class="token comment"># 清除库中数据，也会生成一个dump.rdb文件</span>
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>自动触发是由我们的配置文件来完成的。在redis.conf配置文件中，里面有如下配置，我们可以去设置：</p><p>**①save：**这里是用来配置触发 Redis的 RDB 持久化条件，也就是什么时候将内存中的数据保存到硬盘。比如“save m n”。表示m秒内数据集存在n次修改时，自动触发bgsave。</p><p>默认如下配置：</p><p>#表示900 秒内如果至少有 1 个 key 的值变化，则保存save 900 1#表示300 秒内如果至少有 10 个 key 的值变化，则保存save 300 10#表示60 秒内如果至少有 10000 个 key 的值变化，则保存save 60 10000</p><p>不需要持久化，那么你可以注释掉所有的 save 行来停用保存功能。</p><p>**②stop-writes-on-bgsave-error ：**默认值为yes。当启用了RDB且最后一次后台保存数据失败，Redis是否停止接收数据。这会让用户意识到数据没有正确持久化到磁盘上，否则没有人会注意到灾难（disaster）发生了。如果Redis重启了，那么又可以重新开始接收数据了</p><p>**③rdbcompression ；**默认值是yes。对于存储到磁盘中的快照，可以设置是否进行压缩存储。</p><p>**④rdbchecksum ：**默认值是yes。在存储快照后，我们还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能。</p><p>**⑤dbfilename ：**设置快照的文件名，默认是 dump.rdb</p><p>**⑥dir：**设置快照文件的存放路径，这个配置项一定是个目录，而不能是文件名。</p><p>我们可以修改这些配置来实现我们想要的效果。因为第三种方式是配置的，所以我们对前两种进行一个对比：</p><p><img src="`+i+'" alt="img"></p><p><strong>4、RDB 的优势和劣势</strong></p><p>①、优势</p><p>（1）RDB文件紧凑，全量备份，非常适合用于进行备份和灾难恢复。</p><p>（2）生成RDB文件的时候，redis主进程会fork()一个子进程来处理所有保存工作，主进程不需要进行任何磁盘IO操作。</p><p>（3）RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</p><p>②、劣势</p><p>RDB快照是一次全量备份，存储的是内存数据的二进制序列化形式，存储上非常紧凑。当进行快照持久化时，会开启一个子进程专门负责快照持久化，子进程会拥有父进程的内存数据，父进程修改内存子进程不会反应出来，所以在快照持久化期间修改的数据不会被保存，可能丢失数据。</p><h3 id="三、aof机制-append-only-file" tabindex="-1"><a class="header-anchor" href="#三、aof机制-append-only-file" aria-hidden="true">#</a> 三、AOF机制（append only file）</h3><p>全量备份总是耗时的，有时候我们提供一种更加高效的方式AOF，工作机制很简单，redis会将每一个收到的写命令都通过write函数追加到文件中。通俗的理解就是日志记录。每次都采取的是追加模式。</p><p><strong>1、持久化原理</strong></p><p>他的原理看下面这张图：</p><p><img src="'+l+'" alt="img"></p><p>每当有一个写命令过来时，就直接保存在我们的AOF文件中。</p><p><strong>2、文件重写原理</strong></p><p>AOF的方式也同时带来了另一个问题。持久化文件会变的越来越大。为了压缩aof的持久化文件。redis提供了bgrewriteaof命令。将内存中的数据以命令的方式保存到临时文件中，同时会fork出一条新进程来将文件重写。可以根据配置文件进行配置文件到达多大时重写aof文件。</p><p><img src="'+c+'" alt="img"></p><p>重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似。</p><p><strong>3、AOF也有三种触发机制</strong></p><p>（1）每修改同步always：同步持久化 每次发生数据变更会被立即记录到磁盘 性能较差但数据完整性比较好</p><p>（2）每秒同步everysec：异步操作，每秒记录 如果一秒内宕机，有数据丢失</p><p>（3）不同no：从不同步</p><p><img src="'+r+'" alt="img"></p><p><strong>4、优点</strong></p><p>（1）AOF可以更好的保护数据不丢失，一般AOF会每隔1秒，通过一个后台线程执行一次fsync操作，最多丢失1秒钟的数据。</p><p>（2）AOF日志文件没有任何磁盘寻址的开销，写入性能非常高，文件不容易破损。</p><p>（3）AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。</p><p>（4）AOF日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复。比如某人不小心用flushall命令清空了所有数据，只要这个时候后台rewrite还没有发生，那么就可以立即拷贝AOF文件，将最后一条flushall命令给删了，然后再将该AOF文件放回去，就可以通过恢复机制，自动恢复所有数据</p><p><strong>5、缺点</strong></p><p>（1）对于同一份数据来说，AOF日志文件通常比RDB数据快照文件更大</p><p>（2）AOF开启后，支持的写QPS会比RDB支持的写QPS低，因为AOF一般会配置成每秒fsync一次日志文件，当然，每秒一次fsync，性能也还是很高的</p><p>（3）以前AOF发生过bug，就是通过AOF记录的日志，进行数据恢复的时候，没有恢复一模一样的数据出来。</p><p><strong>四、RDB和AOF到底该如何选择</strong></p><p>选择的话，两者加一起才更好。因为两个持久化机制你明白了，剩下的就是看自己的需求了，需求不同选择的也不一定，但是通常都是结合使用。有一张图可供总结：</p><p><img src="'+u+`" alt="img"></p><h1 id="redis-发布订阅" tabindex="-1"><a class="header-anchor" href="#redis-发布订阅" aria-hidden="true">#</a> Redis 发布订阅</h1><p>订阅端：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PSUBSCRIBE pzy	<span class="token comment"># 订阅频道-pzy</span>
Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;psubscribe&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;pzy&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token comment"># 等待读取推送消息</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;pmessage&quot;</span>	<span class="token comment"># 消息</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;pzy&quot;</span>		<span class="token comment"># 订阅频道的名称</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;pzy&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;helloworld&quot;</span>	<span class="token comment"># 消息的具体内容</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;pmessage&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;pzy&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;pzy&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;zhangsanshuo&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PUBLISH pzy helloworld		<span class="token comment"># 发送消息</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PUBLISH pzy zhangsanshuo
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制" aria-hidden="true">#</a> 主从复制</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> info replication	<span class="token comment"># 查看当前库的信息</span>
<span class="token comment"># Replication</span>
role:master							<span class="token comment"># 角色为master</span>
connected_slaves:0					<span class="token comment"># 当前从机个数</span>
master_repl_offset:0
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复制3个配置文件，修改对应的信息（默认情况下，每台Redis服务器都是主节点，只需要配置从机）</p><ol><li>端口</li><li>pid名称</li><li>log文件名称</li><li>dump.rdb名称</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>可以通过slaveof ip port 进行配置，通过这种方式进行配置的话是暂时的，要永久配置的话需要在配置文件中进行配置
slaveof no one  可以将从节点变为主节点
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>主机可以写，从机只能读不能写，从机写入时会报错</p><p><strong>复制原理需要补充</strong></p><p><strong>层层链路</strong>也只能是从节点，只有一个主节点</p><h1 id="哨兵模式" tabindex="-1"><a class="header-anchor" href="#哨兵模式" aria-hidden="true">#</a> 哨兵模式</h1><p>参考：https://www.cnblogs.com/ysocean/tag/Redis%E8%AF%A6%E8%A7%A3/</p><h3 id="_1、架构图" tabindex="-1"><a class="header-anchor" href="#_1、架构图" aria-hidden="true">#</a> 1、架构图</h3><p><img src="`+d+'" alt="img"></p><h3 id="_2、服务器列表" tabindex="-1"><a class="header-anchor" href="#_2、服务器列表" aria-hidden="true">#</a> 2、服务器列表</h3><p><img src="'+k+`" alt="img"></p><h3 id="_3、搭建哨兵模式" tabindex="-1"><a class="header-anchor" href="#_3、搭建哨兵模式" aria-hidden="true">#</a> 3、搭建哨兵模式</h3><p><strong>①、主要配置项</strong></p><p>配置文件名称为：sentinel.conf</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#配置端口</span>
port <span class="token number">26379</span>
<span class="token comment">#以守护进程模式启动</span>
daemonize <span class="token function">yes</span>
<span class="token comment">#日志文件名</span>
logfile <span class="token string">&quot;sentinel_26379.log&quot;</span>
<span class="token comment">#存放备份文件以及日志等文件的目录</span>
<span class="token function">dir</span> <span class="token string">&quot;/opt/redis/data&quot;</span>
<span class="token comment">#监控的IP 端口号 名称 sentinel通过投票后认为mater宕机的数量，此处为至少\`\`2\`\`个</span>
sentinel monitor mymaster <span class="token number">192.168</span>.14.101 <span class="token number">6379</span> <span class="token number">2</span>
<span class="token comment">#\`\`30\`\`秒ping不通主节点的信息，主观认为master宕机</span>
sentinel down-after-milliseconds mymaster <span class="token number">30000</span>
<span class="token comment">#故障转移后重新主从复制，\`\`1\`\`表示串行，&gt;\`\`1\`\`并行</span>
sentinel parallel-syncs mymaster <span class="token number">1</span>
<span class="token comment">#故障转移开始，三分钟内没有完成，则认为转移失败</span>
sentinel failover-timeout mymaster <span class="token number">180000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意三台服务器的端口配置.如果redis服务器配置了密码连接,则要增加如下配置:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sentinel auth-pass mymaster <span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后面的123表示密码mymaster表示主机.注意这行配置要配置到 sentinel monitor mymaster ip port 后面,因为名称 mymaster要先定义.</p><p>②**、启动哨兵**</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-sentinel sentinel.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③**、验证主从自动切换**</p><p>首先kill掉Redis 主节点.然后查看sentinel 日志:</p><p><img src="`+n+'" alt="img"></p><p>上面截图红框框住的几个重要信息,这里先介绍最后一行,switch-master mymaster 192.168.14.101 6379 192.168.14.103 6381 表示master服务器将由6379的redis服务切换为6381端口的redis服务器.</p><p>PS:<strong>+switch-master</strong> 表示切换主节点.</p><p>然后我们通过 info replication 命令查看 6381的redis服务器:</p><p><img src="'+m+'" alt="img"></p><p>我们发现,6381的Redis服务已经切换成master节点了.</p><p>另外,也可以查看sentinel.conf 配置文件,里面的 sentinel monitor mymaster 192.168.14.101 6379 2 也自动更改为 sentinel monitor mymaster 192.168.14.103 6381 2 配置了.</p><h3 id="_4、java客户端连接原理" tabindex="-1"><a class="header-anchor" href="#_4、java客户端连接原理" aria-hidden="true">#</a> 4、Java客户端连接原理</h3><p><strong>①</strong>、<strong>结构图</strong></p><p><img src="'+b+'" alt="img"></p><p><strong>②、连接步骤</strong></p><p>一.客户端遍历所有的 Sentinel 节点集合,获取一个可用的 Sentinel 节点.</p><p>二.客户端向可用的 Sentinel 节点发送 get-master-addr-by-name 命令,获取Redis Master 节点.</p><p>三.客户端向Redis Master节点发送role或role replication 命令,来确定其是否是Master节点,并且能够获取其 slave节点信息.</p><p>四.客户端获取到确定的节点信息后,便可以向Redis发送命令来进行后续操作了</p><p>需要注意的是:客户端是和Sentinel来进行交互的,通过Sentinel来获取真正的Redis节点信息,然后来操作.实际工作时,Sentinel 内部维护了一个主题队列,用来保存Redis的节点信息,并实时更新,客户端订阅了这个主题,然后实时的去获取这个队列的Redis节点信息.</p><h3 id="_5、哨兵模式工作原理" tabindex="-1"><a class="header-anchor" href="#_5、哨兵模式工作原理" aria-hidden="true">#</a> 5、哨兵模式工作原理</h3><p><strong>①、三个定时任务</strong></p><p>一.每10秒每个 sentinel 对master 和 slave 执行info 命令:该命令第一个是用来发现slave节点,第二个是确定主从关系.</p><p>二.每2秒每个 sentinel 通过 master 节点的 channel(名称为_sentinel_:hello) 交换信息(pub/sub):用来交互对节点的看法(后面会介绍的节点主观下线和客观下线)以及自身信息.</p><p>三.每1秒每个 sentinel 对其他 sentinel 和 redis 执行 ping 命令,用于心跳检测,作为节点存活的判断依据.</p><p><strong>②、主观下线和客观下线</strong></p><p>一.主观下线</p><p>SDOWN:subjectively down,直接翻译的为”主观”失效,即当前sentinel实例认为某个redis服务为”不可用”状态.</p><p>二.客观下线</p><p>ODOWN:objectively down,直接翻译为”客观”失效,即多个sentinel实例都认为master处于”SDOWN”状态,那么此时master将处于ODOWN,ODOWN可以简单理解为master已经被集群确定为”不可用”,将会开启故障转移机制.</p><p>结合我们第4点搭建主从模式,验证主从切换时,kill掉Redis主节点,然后查看 sentinel 日志,如下:</p><p><img src="'+n+'" alt="img"></p><p>发现有类似 sdown 和 odown 的日志.在结合我们配置 sentinel 时的配置文件来看:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#监控的IP 端口号 名称 sentinel通过投票后认为mater宕机的数量，此处为至少``2``个``</span>\nsentinel monitor mymaster <span class="token number">192.168</span>.14.101 <span class="token number">6379</span> <span class="token number">2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后的 2 表示投票数,也就是说当一台 sentinel 发现一个 Redis 服务无法 ping 通时,就标记为 主观下线 sdown;同时另外的 sentinel 服务也发现该 Redis 服务宕机,也标记为 主观下线,当多台 sentinel (大于等于2,上面配置的最后一个)时,都标记该Redis服务宕机,这时候就变为客观下线了,然后进行故障转移.</p><p><strong>③、故障转移</strong></p><p>故障转移是由 sentinel 领导者节点来完成的(只需要一个sentinel节点),关于 sentinel 领导者节点的选取也是每个 sentinel 向其他 sentinel 节点发送我要成为领导者的命令,超过半数sentinel 节点同意,并且也大于quorum ,那么他将成为领导者,如果有多个sentinel都成为了领导者,则会过段时间在进行选举.</p><p>sentinel 领导者节点选举出来后,会通过如下几步进行故障转移:</p><p>一.从 slave 节点中选出一个合适的 节点作为新的master节点.这里的合适包括如下几点:</p><p>1.选择 slave-priority(slave节点优先级)最高的slave节点,如果存在则返回,不存在则继续下一步判断.</p><p>2.选择复制偏移量最大的 slave 节点(复制的最完整),如果存在则返回,不存在则继续.</p><p>3.选择runId最小的slave节点(启动最早的节点)</p><p>二.对上面选出来的 slave 节点执行 slaveof no one 命令让其成为新的 master 节点.</p><p>三.向剩余的 slave 节点发送命令,让他们成为新master 节点的 slave 节点,复制规则和前面设置的 parallel-syncs 参数有关.</p><p>四.更新原来master 节点配置为 slave 节点,并保持对其进行关注,一旦这个节点重新恢复正常后,会命令它去复制新的master节点信息.(注意:原来的master节点恢复后是作为slave的角色)</p><p>可以从 sentinel 日志中出现的几个消息来进行查看故障转移:</p><p>1.<strong>+switch-master</strong>:表示切换主节点(从节点晋升为主节点)</p><p>2.<strong>+sdown</strong>:主观下线</p><p>3.<strong>+odown</strong>:客观下线</p><p>4.<strong>+convert-to-slave</strong>:切换从节点(原主节点降为从节点)</p><h1 id="缓存穿透、击穿和雪崩" tabindex="-1"><a class="header-anchor" href="#缓存穿透、击穿和雪崩" aria-hidden="true">#</a> 缓存穿透、击穿和雪崩</h1><h3 id="_1、缓存穿透" tabindex="-1"><a class="header-anchor" href="#_1、缓存穿透" aria-hidden="true">#</a> 1、缓存穿透</h3><h4 id="一、概念" tabindex="-1"><a class="header-anchor" href="#一、概念" aria-hidden="true">#</a> 一、概念</h4><p>缓存穿透：缓存和数据库中都没有的数据，可用户还是源源不断的发起请求，导致每次请求都会到数据库，从而压垮数据库。</p><p>如下图红色的流程：</p><p><img src="'+v+'" alt="img"></p><p>比如客户查询一个根本不存在的东西，首先从Redis中查不到，然后会去数据库中查询，数据库中也查询不到，那么就不会将数据放入到缓存中，后面如果还有类似源源不断的请求，最后都会压到数据库来处理，从而给数据库造成巨大的压力。</p><h4 id="二、解决办法" tabindex="-1"><a class="header-anchor" href="#二、解决办法" aria-hidden="true">#</a> 二、解决办法</h4><p><strong>①、业务层校验</strong></p><p>用户发过来的请求，根据请求参数进行校验，对于明显错误的参数，直接拦截返回。</p><p>比如，请求参数为主键自增id，那么对于请求小于0的id参数，明显不符合，可以直接返回错误请求。</p><p><strong>②、不存在数据设置短过期时间</strong></p><p>对于某个查询为空的数据，可以将这个空结果进行Redis缓存，但是设置很短的过期时间，比如30s，可以根据实际业务设定。注意一定不要影响正常业务。</p><p><strong>③、布隆过滤器</strong></p><p>关于布隆过滤器，后面会详细介绍。布隆过滤器是一种数据结构，利用极小的内存，可以判断大量的数据“一定不存在或者可能存在”。</p><p>对于缓存穿透，我们可以将查询的数据条件都哈希到一个足够大的布隆过滤器中，用户发送的请求会先被布隆过滤器拦截，一定不存在的数据就直接拦截返回了，从而避免下一步对数据库的压力。</p><h3 id="_2、缓存击穿" tabindex="-1"><a class="header-anchor" href="#_2、缓存击穿" aria-hidden="true">#</a> 2、缓存击穿</h3><h4 id="一、概念-1" tabindex="-1"><a class="header-anchor" href="#一、概念-1" aria-hidden="true">#</a> 一、概念</h4><p>缓存击穿：Redis中一个热点key在失效的同时，大量的请求过来，从而会全部到达数据库，压垮数据库。</p><p><img src="'+g+'" alt="img"></p><p>这里要注意的是这是某一个热点key过期失效，和后面介绍缓存雪崩是有区别的。比如淘宝双十一，对于某个特价热门的商品信息，缓存在Redis中，刚好0点，这个商品信息在Redis中过期查不到了，这时候大量的用户又同时正好访问这个商品，就会造成大量的请求同时到达数据库。</p><h4 id="二、解决办法-1" tabindex="-1"><a class="header-anchor" href="#二、解决办法-1" aria-hidden="true">#</a> 二、解决办法</h4><p><strong>①、设置热点数据永不过期</strong></p><p>对于某个需要频繁获取的信息，缓存在Redis中，并设置其永不过期。当然这种方式比较粗暴，对于某些业务场景是不适合的。</p><p><strong>②、定时更新</strong></p><p>比如这个热点数据的过期时间是1h，那么每到59minutes时，通过定时任务去更新这个热点key，并重新设置其过期时间。</p><p>③**、互斥锁**</p><p>这是解决缓存击穿比较常用的方法。</p><p>互斥锁简单来说就是在Redis中根据key获得的value值为空时，先锁上，然后从数据库加载，加载完毕，释放锁。若其他线程也在请求该key时，发现获取锁失败，则睡眠一段时间（比如100ms）后重试。也可以使用双重检测同步锁：https://blog.csdn.net/weixin_42857269/article/details/120181414</p><h3 id="_3、缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_3、缓存雪崩" aria-hidden="true">#</a> <strong>3、缓存雪崩</strong></h3><h4 id="一、概念-2" tabindex="-1"><a class="header-anchor" href="#一、概念-2" aria-hidden="true">#</a> 一、概念</h4><p>缓存雪崩：Redis中缓存的数据大面积同时失效，或者Redis宕机，从而会导致大量请求直接到数据库，压垮数据库。</p><p><img src="'+h+'" alt="img"></p><p>对于一个业务系统，如果Redis宕机或大面积的key同时过期，会导致大量请求同时打到数据库，这是灾难性的问题。</p><h4 id="二、解决办法-2" tabindex="-1"><a class="header-anchor" href="#二、解决办法-2" aria-hidden="true">#</a> 二、解决办法</h4><p><strong>①、设置有效期均匀分布</strong></p><p>避免缓存设置相近的有效期，我们可以在设置有效期时增加随机值；</p><p>或者统一规划有效期，使得过期时间均匀分布。</p><p><strong>②、数据预热</strong></p><p>对于即将来临的大量请求，我们可以提前走一遍系统，将数据提前缓存在Redis中，并设置不同的过期时间。</p><p><strong>③、保证Redis服务高可用</strong></p><p>前面我们介绍过Redis的哨兵模式和集群模式，为防止Redis集群单节点故障，可以通过这两种模式实现高可用。</p><h1 id="布隆过滤器" tabindex="-1"><a class="header-anchor" href="#布隆过滤器" aria-hidden="true">#</a> 布隆过滤器</h1><h3 id="_1、布隆过滤器使用场景" tabindex="-1"><a class="header-anchor" href="#_1、布隆过滤器使用场景" aria-hidden="true">#</a> 1、布隆过滤器使用场景</h3><p>比如有如下几个需求：</p><p>①、原本有10亿个号码，现在又来了10万个号码，要快速准确判断这10万个号码是否在10亿个号码库中？</p><p>解决办法一：将10亿个号码存入数据库中，进行数据库查询，准确性有了，但是速度会比较慢。</p><p>解决办法二：将10亿号码放入内存中，比如Redis缓存中，这里我们算一下占用内存大小：10亿*8字节=8GB，通过内存查询，准确性和速度都有了，但是大约8gb的内存空间，挺浪费内存空间的。</p><p>②、接触过爬虫的，应该有这么一个需求，需要爬虫的网站千千万万，对于一个新的网站url，我们如何判断这个url我们是否已经爬过了？</p><p>解决办法还是上面的两种，很显然，都不太好。</p><p>③、同理还有垃圾邮箱的过滤。</p><p>那么对于类似这种，大数据量集合，如何准确快速的判断某个数据是否在大数据量集合中，并且不占用内存，<strong>布隆过滤器</strong>应运而生了。</p><h3 id="_2、布隆过滤器简介" tabindex="-1"><a class="header-anchor" href="#_2、布隆过滤器简介" aria-hidden="true">#</a> 2、布隆过滤器简介</h3><p>带着上面的几个疑问，我们来看看到底什么是布隆过滤器。</p><p>布隆过滤器：一种数据结构，是由一串很长的二进制向量组成，可以将其看成一个二进制数组。既然是二进制，那么里面存放的不是0，就是1，但是初始默认值都是0。</p><p>如下所示：</p><p><img src="'+f+'" alt="img"></p><p><strong>①、添加数据</strong></p><p>介绍概念的时候，我们说可以将布隆过滤器看成一个容器，那么如何向布隆过滤器中添加一个数据呢？</p><p>如下图所示：当要向布隆过滤器中添加一个元素key时，我们通过多个hash函数，算出一个值，然后将这个值所在的方格置为1。</p><p>比如，下图hash1(key)=1，那么在第2个格子将0变为1（数组是从0开始计数的），hash2(key)=7，那么将第8个格子置位1，依次类推。</p><p><img src="'+q+'" alt="img"></p><p><strong>②、判断数据是否存在？</strong></p><p>知道了如何向布隆过滤器中添加一个数据，那么新来一个数据，我们如何判断其是否存在于这个布隆过滤器中呢？</p><p>很简单，我们只需要将这个新的数据通过上面自定义的几个哈希函数，分别算出各个值，然后看其对应的地方是否都是1，如果存在一个不是1的情况，那么我们可以说，该新数据一定不存在于这个布隆过滤器中。</p><p>反过来说，如果通过哈希函数算出来的值，对应的地方都是1，那么我们能够肯定的得出：这个数据一定存在于这个布隆过滤器中吗？</p><p>答案是否定的，因为多个不同的数据通过hash函数算出来的结果是会有重复的，所以会存在某个位置是别的数据通过hash函数置为的1。</p><p>我们可以得到一个结论：<strong>布隆过滤器可以判断某个数据一定不存在，但是无法判断一定存在</strong>。</p><p><strong>③、布隆过滤器优缺点</strong></p><p>优点：优点很明显，二进制组成的数组，占用内存极少，并且插入和查询速度都足够快。</p><p>缺点：随着数据的增加，误判率会增加；还有无法判断数据一定存在；另外还有一个重要缺点，无法删除数据。</p><h3 id="_3、redis实现布隆过滤器" tabindex="-1"><a class="header-anchor" href="#_3、redis实现布隆过滤器" aria-hidden="true">#</a> 3、Redis实现布隆过滤器</h3><h4 id="_1、bitmaps" tabindex="-1"><a class="header-anchor" href="#_1、bitmaps" aria-hidden="true">#</a> ①、bitmaps</h4><p>我们知道计算机是以二进制位作为底层存储的基础单位，一个字节等于8位。</p><p>比如“big”字符串是由三个字符组成的，这三个字符对应的ASCII码分为是98、105、103，对应的二进制存储如下：</p><p><img src="'+y+`" alt="img"></p><p>在Redis中，Bitmaps 提供了一套命令用来操作类似上面字符串中的每一个位。</p><p><strong>一、设置值</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>setbit key offset value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+R+`" alt="img"></p><p>我们知道&quot;b&quot;的二进制表示为0110 0010，我们将第7位（从0开始）设置为1，那0110 0011 表示的就是字符“c”，所以最后的字符 “big”变成了“cig”。</p><p><strong>二、获取值</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gitbit key offset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+E+`" alt="img"></p><p><strong>三、获取位图指定范围值为1的个数</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bitcount key [start end]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不指定，那就是获取全部值为1的个数。</p><p>注意：start和end指定的是<strong>字节的个数</strong>，而不是位数组下标。</p><p><img src="`+w+`" alt="img"></p><h4 id="_2、redisson" tabindex="-1"><a class="header-anchor" href="#_2、redisson" aria-hidden="true">#</a> ②、Redisson</h4><p>Redis 实现布隆过滤器的底层就是通过 bitmap 这种数据结构，至于如何实现，这里就不重复造轮子了，介绍业界比较好用的一个客户端工具——Redisson。</p><p>Redisson 是用于在 Java 程序中操作 Redis 的库，利用Redisson 我们可以在程序中轻松地使用 Redis。</p><p>下面我们就通过 Redisson 来构造布隆过滤器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ys<span class="token punctuation">.</span>rediscluster<span class="token punctuation">.</span>bloomfilter<span class="token punctuation">.</span>redisson</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span></span><span class="token class-name">Redisson</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RBloomFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RedissonClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">Config</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonBloomFilter</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;redis://192.168.14.104:6379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//构造Redisson</span>
        <span class="token class-name">RedissonClient</span> redisson <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">RBloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">&quot;phoneList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//初始化布隆过滤器：预计元素为100000000L,误差率为3%</span>
        bloomFilter<span class="token punctuation">.</span><span class="token function">tryInit</span><span class="token punctuation">(</span><span class="token number">100000000L</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将号码10086插入到布隆过滤器中</span>
        bloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//判断下面号码是否在布隆过滤器中</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是单节点的Redis实现方式，如果数据量比较大，期望的误差率又很低，那单节点所提供的内存是无法满足的，这时候可以使用分布式布隆过滤器，同样也可以用 Redisson 来实现，这里我就不做代码演示了，大家有兴趣可以试试。</p><h3 id="_4、guava-工具" tabindex="-1"><a class="header-anchor" href="#_4、guava-工具" aria-hidden="true">#</a> 4、guava 工具</h3><p>最后提一下不用Redis如何来实现布隆过滤器。</p><p>guava 工具包相信大家都用过，这是谷歌公司提供的，里面也提供了布隆过滤器的实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ys<span class="token punctuation">.</span>rediscluster<span class="token punctuation">.</span>bloomfilter</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Charsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span></span><span class="token class-name">BloomFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span></span><span class="token class-name">Funnel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span></span><span class="token class-name">Funnels</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuavaBloomFilter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Funnels</span><span class="token punctuation">.</span><span class="token function">stringFunnel</span><span class="token punctuation">(</span><span class="token class-name">Charsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        bloomFilter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token string">&quot;10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理" aria-hidden="true">#</a> 底层原理</h1><h1 id="lua脚本" tabindex="-1"><a class="header-anchor" href="#lua脚本" aria-hidden="true">#</a> LUA脚本</h1><h1 id="stringredistemplate的opsforvalue-setifabsent" tabindex="-1"><a class="header-anchor" href="#stringredistemplate的opsforvalue-setifabsent" aria-hidden="true">#</a> StringRedisTemplate的opsForValue().setIfAbsent()</h1><p>setIfAbsent相当于setnx(key,value);只有key不存在时设置key的值，存在则不设置并返回false</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Boolean</span> lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expireTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用场景：保证并发时一个接口执行多次，在方法执行时设置锁，方法执行完成或异常释放锁</p><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">applyLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;business signing lock&quot;</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h1><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Boolean del = redisTemplate.delete(key);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="为什么说redis是单线程的以及redis为什么这么快" tabindex="-1"><a class="header-anchor" href="#为什么说redis是单线程的以及redis为什么这么快" aria-hidden="true">#</a> 为什么说Redis是单线程的以及Redis为什么这么快！</h1><p>https://blog.csdn.net/chenyao1994/article/details/79491337</p>`,323),S=[_];function O(A,D){return a(),e("div",null,S)}const L=s(x,[["render",O],["__file","Redis.html.vue"]]);export{L as default};
