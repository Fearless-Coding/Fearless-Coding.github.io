import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as p,a as n,d as s,b as e,f as t}from"./app-83b74644.js";const l={},u=t(`<h1 id="问题总结" tabindex="-1"><a class="header-anchor" href="#问题总结" aria-hidden="true">#</a> 问题总结：</h1><h2 id="问题1-required-a-single-bean-but-2-were-found" tabindex="-1"><a class="header-anchor" href="#问题1-required-a-single-bean-but-2-were-found" aria-hidden="true">#</a> 问题1：required a single bean, but 2 were found:</h2><h3 id="问题场景" tabindex="-1"><a class="header-anchor" href="#问题场景" aria-hidden="true">#</a> <strong>问题场景</strong>：</h3><ol><li>MQ中使用了两种类型的消息，事务消息和普通消息，要分别注入两个相同的Bean</li></ol><h3 id="问题原因" tabindex="-1"><a class="header-anchor" href="#问题原因" aria-hidden="true">#</a> 问题原因：</h3><p>项目中出现两个相同的Bean</p><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案：</h3><ol><li><p>在注解增加BeanName配置：<code>@Bean(&quot;ipKeyResolver&quot;)</code>和<code>@Primary</code>,带@Primary注解的优先，表示是主Bean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;transactionMQProducer&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">MQProducer</span> <span class="token function">transactionMQProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  
<span class="token punctuation">}</span>


<span class="token annotation punctuation">@Primary</span>
<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;defaultMQProducer&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">MQProducer</span> <span class="token function">defaultMQProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>消费者使用<code>@Qualifier(&quot;name&quot;)</code>消费Bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;transactionMQProducer&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">MQProducer</span> producer<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;defaultMQProducer&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">MQProducer</span> defaultMQProducer<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考：</h3>`,9),r={href:"https://blog.csdn.net/cc007cc009/article/details/106664829",target:"_blank",rel:"noopener noreferrer"},d={href:"https://blog.csdn.net/qq_37342720/article/details/118443094",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="问题2-怎么给类起别名" tabindex="-1"><a class="header-anchor" href="#问题2-怎么给类起别名" aria-hidden="true">#</a> 问题2：怎么给类起别名</h2><h3 id="问题场景-1" tabindex="-1"><a class="header-anchor" href="#问题场景-1" aria-hidden="true">#</a> 问题场景：</h3><p>获取别名的方式是动态的，我们在使用通过<code>@Service(&quot;abc1&quot;)</code> 类名的方式获取别名，此时又新建了一个类和abc1实现方式相同，但是我们动态类名为<code>@Service(&quot;abc2&quot;)</code> 此时我们不需要复制一个类去修改abc1为abc2</p><h3 id="问题原因-1" tabindex="-1"><a class="header-anchor" href="#问题原因-1" aria-hidden="true">#</a> 问题原因：</h3><h3 id="解决方案-1" tabindex="-1"><a class="header-anchor" href="#解决方案-1" aria-hidden="true">#</a> 解决方案：</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">&quot;openBillServiceByDY0001&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DyPetClaimOpenBillService</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractApisClaimOpenBillService</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>ins<span class="token punctuation">.</span>barley<span class="token punctuation">.</span>claim<span class="token punctuation">.</span>service<span class="token punctuation">.</span>push</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableListableBeanFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 宠物险售卖版理赔推送Bean提供别名
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClaimOpenBillServiceAliasConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 解析器
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConfigurableListableBeanFactory</span> configurableListableBeanFactory<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 为OpenBillServiceByZX0001 注册新的别名 OpenBillServiceByZX0002</span>
        configurableListableBeanFactory<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">&quot;openBillServiceByZX0001&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;openBillServiceByZX0002&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function v(m,b){const a=o("ExternalLinkIcon");return c(),p("div",null,[u,n("p",null,[n("a",r,[s("https://blog.csdn.net/cc007cc009/article/details/106664829"),e(a)])]),n("p",null,[n("a",d,[s("https://blog.csdn.net/qq_37342720/article/details/118443094"),e(a)])]),k])}const f=i(l,[["render",v],["__file","Spring.html.vue"]]);export{f as default};
