import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as n,d as s,b as e,f as t}from"./app-8daa8f43.js";const r="/images/1120165-20200210163639369-1861604133.png",u="/images/1120165-20200210163723019-1037639332.png",p="/images/1120165-20200210201842784-528299150.png",d="/images/1120165-20200210202309053-1947340550.png",m="/images/1120165-20200211122445582-11189433.png",k="/images/1120165-20200808214325134-1676845673.png",v="/images/1120165-20200808214359739-1247536410.png",b="/images/1120165-20200329215008122-335003416.png",g="/images/1120165-20200330220824117-1290183653.png",h="/images/1120165-20200330221613591-2062171492.png",f="/images/1120165-20200404213453130-714545258.png",y="/images/1120165-20200404214003953-5622706.png",_="/images/1120165-20200404214216788-374691466.png",x="/images/1120165-20200404214812688-1075855704.png",R={},w=t(`<h1 id="redis进阶" tabindex="-1"><a class="header-anchor" href="#redis进阶" aria-hidden="true">#</a> Redis进阶</h1><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><p>Redis中没有隔离级别的概念</p><p>Redis中单条命令是保证原子性的，但是事务不保证原子性。（有运行时异常不会回滚）</p><p>正常执行事务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI			<span class="token comment"># 开启事务</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> k1 v1		
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> k2 v2
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get k1
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exec</span>			<span class="token comment"># 执行事务</span>
<span class="token number">1</span><span class="token punctuation">)</span> OK
<span class="token number">2</span><span class="token punctuation">)</span> OK
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;v1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>放弃事务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> k1 v1
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> discard			<span class="token comment"># 放弃事务</span>
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译型异常（命令有误！）事务中的所以命令都不会执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> k1 v1
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getset k2		<span class="token comment"># 命令有误</span>
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR wrong number of arguments <span class="token keyword">for</span> <span class="token string">&#39;getset&#39;</span> <span class="token builtin class-name">command</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exec</span>			<span class="token comment"># 执行事务报错</span>
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> EXECABORT Transaction discarded because of previous errors.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行时异常（1/0）如果事务队列中存在语法性错误，那么执行命令的时候，其他命令可以正常执行，错误命令抛出异常：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get k1
<span class="token string">&quot;v1&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get k1
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incr k1			<span class="token comment"># 错误语法，在字符串上加1</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> k3 v3
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exec</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;v1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range
<span class="token number">3</span><span class="token punctuation">)</span> OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="乐观锁watch监控" tabindex="-1"><a class="header-anchor" href="#乐观锁watch监控" aria-hidden="true">#</a> 乐观锁watch监控</h2><p>Redis中watch可以当做乐观锁去操作</p><p>正常执行：事务正常执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> money <span class="token number">100</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> out <span class="token number">20</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">watch</span> money			<span class="token comment"># 监视 money对象</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> decrby money <span class="token number">20</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby out <span class="token number">20</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exec</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">80</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">20</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多线程修改测试：事务提交失败</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">watch</span> money			<span class="token comment"># 监视 money对象</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI -
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> decrby money <span class="token number">20</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby out <span class="token number">20</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exec</span>				<span class="token comment"># 执行之前，另外一个线程修改了money的值，这个时候就会导致事务提交失败</span>
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>失败解决方案：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> UNWATCH				<span class="token comment"># 先解锁</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">watch</span> money			<span class="token comment"># 获取money的最新值在进行监视</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI -
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> decrby money <span class="token number">10</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby out <span class="token number">10</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exec</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">190</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redis-发布订阅" tabindex="-1"><a class="header-anchor" href="#redis-发布订阅" aria-hidden="true">#</a> Redis 发布订阅</h2><p>订阅端：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PSUBSCRIBE pzy	<span class="token comment"># 订阅频道-pzy</span>
Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;psubscribe&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;pzy&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token comment"># 等待读取推送消息</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;pmessage&quot;</span>	<span class="token comment"># 消息</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;pzy&quot;</span>		<span class="token comment"># 订阅频道的名称</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;pzy&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;helloworld&quot;</span>	<span class="token comment"># 消息的具体内容</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;pmessage&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;pzy&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;pzy&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;zhangsanshuo&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PUBLISH pzy helloworld		<span class="token comment"># 发送消息</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PUBLISH pzy zhangsanshuo
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制" aria-hidden="true">#</a> 主从复制</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> info replication	<span class="token comment"># 查看当前库的信息</span>
<span class="token comment"># Replication</span>
role:master							<span class="token comment"># 角色为master</span>
connected_slaves:0					<span class="token comment"># 当前从机个数</span>
master_repl_offset:0
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复制3个配置文件，修改对应的信息（默认情况下，每台Redis服务器都是主节点，只需要配置从机）</p><ol><li>端口</li><li>pid名称</li><li>log文件名称</li><li>dump.rdb名称</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>可以通过slaveof ip port 进行配置，通过这种方式进行配置的话是暂时的，要永久配置的话需要在配置文件中进行配置
slaveof no one  可以将从节点变为主节点
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>主机可以写，从机只能读不能写，从机写入时会报错</p><p><strong>复制原理需要补充</strong></p><p><strong>层层链路</strong>也只能是从节点，只有一个主节点</p><h2 id="哨兵模式" tabindex="-1"><a class="header-anchor" href="#哨兵模式" aria-hidden="true">#</a> 哨兵模式</h2>`,34),q={href:"https://www.cnblogs.com/ysocean/tag/Redis%E8%AF%A6%E8%A7%A3/",target:"_blank",rel:"noopener noreferrer"},U=t('<h3 id="_1、架构图" tabindex="-1"><a class="header-anchor" href="#_1、架构图" aria-hidden="true">#</a> 1、架构图</h3><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2、服务器列表" tabindex="-1"><a class="header-anchor" href="#_2、服务器列表" aria-hidden="true">#</a> 2、服务器列表</h3><figure><img src="'+u+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3、搭建哨兵模式" tabindex="-1"><a class="header-anchor" href="#_3、搭建哨兵模式" aria-hidden="true">#</a> 3、搭建哨兵模式</h3><p><strong>①、主要配置项</strong></p><p>配置文件名称为：sentinel.conf</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#配置端口</span>
port <span class="token number">26379</span>
<span class="token comment">#以守护进程模式启动</span>
daemonize <span class="token function">yes</span>
<span class="token comment">#日志文件名</span>
logfile <span class="token string">&quot;sentinel_26379.log&quot;</span>
<span class="token comment">#存放备份文件以及日志等文件的目录</span>
<span class="token function">dir</span> <span class="token string">&quot;/opt/redis/data&quot;</span>
<span class="token comment">#监控的IP 端口号 名称 sentinel通过投票后认为mater宕机的数量，此处为至少\`\`2\`\`个</span>
sentinel monitor mymaster <span class="token number">192.168</span>.14.101 <span class="token number">6379</span> <span class="token number">2</span>
<span class="token comment">#\`\`30\`\`秒ping不通主节点的信息，主观认为master宕机</span>
sentinel down-after-milliseconds mymaster <span class="token number">30000</span>
<span class="token comment">#故障转移后重新主从复制，\`\`1\`\`表示串行，&gt;\`\`1\`\`并行</span>
sentinel parallel-syncs mymaster <span class="token number">1</span>
<span class="token comment">#故障转移开始，三分钟内没有完成，则认为转移失败</span>
sentinel failover-timeout mymaster <span class="token number">180000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意三台服务器的端口配置.如果redis服务器配置了密码连接,则要增加如下配置:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sentinel auth-pass mymaster <span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后面的123表示密码mymaster表示主机.注意这行配置要配置到 sentinel monitor mymaster ip port 后面,因为名称 mymaster要先定义.</p><p>②**、启动哨兵**</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-sentinel sentinel.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③**、验证主从自动切换**</p><p>首先kill掉Redis 主节点.然后查看sentinel 日志:</p><figure><img src="`+p+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上面截图红框框住的几个重要信息,这里先介绍最后一行,switch-master mymaster 192.168.14.101 6379 192.168.14.103 6381 表示master服务器将由6379的redis服务切换为6381端口的redis服务器.</p><p>PS:<strong>+switch-master</strong> 表示切换主节点.</p><p>然后我们通过 info replication 命令查看 6381的redis服务器:</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们发现,6381的Redis服务已经切换成master节点了.</p><p>另外,也可以查看sentinel.conf 配置文件,里面的 sentinel monitor mymaster 192.168.14.101 6379 2 也自动更改为 sentinel monitor mymaster 192.168.14.103 6381 2 配置了.</p><h3 id="_4、java客户端连接原理" tabindex="-1"><a class="header-anchor" href="#_4、java客户端连接原理" aria-hidden="true">#</a> 4、Java客户端连接原理</h3><p><strong>①</strong>、<strong>结构图</strong></p><figure><img src="'+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>②、连接步骤</strong></p><p>一.客户端遍历所有的 Sentinel 节点集合,获取一个可用的 Sentinel 节点.</p><p>二.客户端向可用的 Sentinel 节点发送 get-master-addr-by-name 命令,获取Redis Master 节点.</p><p>三.客户端向Redis Master节点发送role或role replication 命令,来确定其是否是Master节点,并且能够获取其 slave节点信息.</p><p>四.客户端获取到确定的节点信息后,便可以向Redis发送命令来进行后续操作了</p><p>需要注意的是:客户端是和Sentinel来进行交互的,通过Sentinel来获取真正的Redis节点信息,然后来操作.实际工作时,Sentinel 内部维护了一个主题队列,用来保存Redis的节点信息,并实时更新,客户端订阅了这个主题,然后实时的去获取这个队列的Redis节点信息.</p><h3 id="_5、哨兵模式工作原理" tabindex="-1"><a class="header-anchor" href="#_5、哨兵模式工作原理" aria-hidden="true">#</a> 5、哨兵模式工作原理</h3><p><strong>①、三个定时任务</strong></p><p>一.每10秒每个 sentinel 对master 和 slave 执行info 命令:该命令第一个是用来发现slave节点,第二个是确定主从关系.</p><p>二.每2秒每个 sentinel 通过 master 节点的 channel(名称为_sentinel_:hello) 交换信息(pub/sub):用来交互对节点的看法(后面会介绍的节点主观下线和客观下线)以及自身信息.</p><p>三.每1秒每个 sentinel 对其他 sentinel 和 redis 执行 ping 命令,用于心跳检测,作为节点存活的判断依据.</p><p><strong>②、主观下线和客观下线</strong></p><p>一.主观下线</p><p>SDOWN:subjectively down,直接翻译的为”主观”失效,即当前sentinel实例认为某个redis服务为”不可用”状态.</p><p>二.客观下线</p><p>ODOWN:objectively down,直接翻译为”客观”失效,即多个sentinel实例都认为master处于”SDOWN”状态,那么此时master将处于ODOWN,ODOWN可以简单理解为master已经被集群确定为”不可用”,将会开启故障转移机制.</p><p>结合我们第4点搭建主从模式,验证主从切换时,kill掉Redis主节点,然后查看 sentinel 日志,如下:</p><figure><img src="'+p+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>发现有类似 sdown 和 odown 的日志.在结合我们配置 sentinel 时的配置文件来看:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#监控的IP 端口号 名称 sentinel通过投票后认为mater宕机的数量，此处为至少``2``个``</span>\nsentinel monitor mymaster <span class="token number">192.168</span>.14.101 <span class="token number">6379</span> <span class="token number">2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后的 2 表示投票数,也就是说当一台 sentinel 发现一个 Redis 服务无法 ping 通时,就标记为 主观下线 sdown;同时另外的 sentinel 服务也发现该 Redis 服务宕机,也标记为 主观下线,当多台 sentinel (大于等于2,上面配置的最后一个)时,都标记该Redis服务宕机,这时候就变为客观下线了,然后进行故障转移.</p><p><strong>③、故障转移</strong></p><p>故障转移是由 sentinel 领导者节点来完成的(只需要一个sentinel节点),关于 sentinel 领导者节点的选取也是每个 sentinel 向其他 sentinel 节点发送我要成为领导者的命令,超过半数sentinel 节点同意,并且也大于quorum ,那么他将成为领导者,如果有多个sentinel都成为了领导者,则会过段时间在进行选举.</p><p>sentinel 领导者节点选举出来后,会通过如下几步进行故障转移:</p><p>一.从 slave 节点中选出一个合适的 节点作为新的master节点.这里的合适包括如下几点:</p><p>1.选择 slave-priority(slave节点优先级)最高的slave节点,如果存在则返回,不存在则继续下一步判断.</p><p>2.选择复制偏移量最大的 slave 节点(复制的最完整),如果存在则返回,不存在则继续.</p><p>3.选择runId最小的slave节点(启动最早的节点)</p><p>二.对上面选出来的 slave 节点执行 slaveof no one 命令让其成为新的 master 节点.</p><p>三.向剩余的 slave 节点发送命令,让他们成为新master 节点的 slave 节点,复制规则和前面设置的 parallel-syncs 参数有关.</p><p>四.更新原来master 节点配置为 slave 节点,并保持对其进行关注,一旦这个节点重新恢复正常后,会命令它去复制新的master节点信息.(注意:原来的master节点恢复后是作为slave的角色)</p><p>可以从 sentinel 日志中出现的几个消息来进行查看故障转移:</p><p>1.<strong>+switch-master</strong>:表示切换主节点(从节点晋升为主节点)</p><p>2.<strong>+sdown</strong>:主观下线</p><p>3.<strong>+odown</strong>:客观下线</p><p>4.<strong>+convert-to-slave</strong>:切换从节点(原主节点降为从节点)</p><h2 id="缓存穿透、击穿和雪崩" tabindex="-1"><a class="header-anchor" href="#缓存穿透、击穿和雪崩" aria-hidden="true">#</a> 缓存穿透、击穿和雪崩</h2><h3 id="_1、缓存穿透" tabindex="-1"><a class="header-anchor" href="#_1、缓存穿透" aria-hidden="true">#</a> 1、缓存穿透</h3><h4 id="一、概念" tabindex="-1"><a class="header-anchor" href="#一、概念" aria-hidden="true">#</a> 一、概念</h4><p>缓存穿透：缓存和数据库中都没有的数据，可用户还是源源不断的发起请求，导致每次请求都会到数据库，从而压垮数据库。</p><p>如下图红色的流程：</p><figure><img src="'+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>比如客户查询一个根本不存在的东西，首先从Redis中查不到，然后会去数据库中查询，数据库中也查询不到，那么就不会将数据放入到缓存中，后面如果还有类似源源不断的请求，最后都会压到数据库来处理，从而给数据库造成巨大的压力。</p><h4 id="二、解决办法" tabindex="-1"><a class="header-anchor" href="#二、解决办法" aria-hidden="true">#</a> 二、解决办法</h4><p><strong>①、业务层校验</strong></p><p>用户发过来的请求，根据请求参数进行校验，对于明显错误的参数，直接拦截返回。</p><p>比如，请求参数为主键自增id，那么对于请求小于0的id参数，明显不符合，可以直接返回错误请求。</p><p><strong>②、不存在数据设置短过期时间</strong></p><p>对于某个查询为空的数据，可以将这个空结果进行Redis缓存，但是设置很短的过期时间，比如30s，可以根据实际业务设定。注意一定不要影响正常业务。</p><p><strong>③、布隆过滤器</strong></p><p>关于布隆过滤器，后面会详细介绍。布隆过滤器是一种数据结构，利用极小的内存，可以判断大量的数据“一定不存在或者可能存在”。</p><p>对于缓存穿透，我们可以将查询的数据条件都哈希到一个足够大的布隆过滤器中，用户发送的请求会先被布隆过滤器拦截，一定不存在的数据就直接拦截返回了，从而避免下一步对数据库的压力。</p><h3 id="_2、缓存击穿" tabindex="-1"><a class="header-anchor" href="#_2、缓存击穿" aria-hidden="true">#</a> 2、缓存击穿</h3><h4 id="一、概念-1" tabindex="-1"><a class="header-anchor" href="#一、概念-1" aria-hidden="true">#</a> 一、概念</h4><p>缓存击穿：Redis中一个热点key在失效的同时，大量的请求过来，从而会全部到达数据库，压垮数据库。</p><figure><img src="'+v+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里要注意的是这是某一个热点key过期失效，和后面介绍缓存雪崩是有区别的。比如淘宝双十一，对于某个特价热门的商品信息，缓存在Redis中，刚好0点，这个商品信息在Redis中过期查不到了，这时候大量的用户又同时正好访问这个商品，就会造成大量的请求同时到达数据库。</p><h4 id="二、解决办法-1" tabindex="-1"><a class="header-anchor" href="#二、解决办法-1" aria-hidden="true">#</a> 二、解决办法</h4><p><strong>①、设置热点数据永不过期</strong></p><p>对于某个需要频繁获取的信息，缓存在Redis中，并设置其永不过期。当然这种方式比较粗暴，对于某些业务场景是不适合的。</p><p><strong>②、定时更新</strong></p><p>比如这个热点数据的过期时间是1h，那么每到59minutes时，通过定时任务去更新这个热点key，并重新设置其过期时间。</p><p>③**、互斥锁**</p><p>这是解决缓存击穿比较常用的方法。</p>',89),E={href:"https://blog.csdn.net/weixin_42857269/article/details/120181414",target:"_blank",rel:"noopener noreferrer"},z=t('<h3 id="_3、缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_3、缓存雪崩" aria-hidden="true">#</a> <strong>3、缓存雪崩</strong></h3><h4 id="一、概念-2" tabindex="-1"><a class="header-anchor" href="#一、概念-2" aria-hidden="true">#</a> 一、概念</h4><p>缓存雪崩：Redis中缓存的数据大面积同时失效，或者Redis宕机，从而会导致大量请求直接到数据库，压垮数据库。</p><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>对于一个业务系统，如果Redis宕机或大面积的key同时过期，会导致大量请求同时打到数据库，这是灾难性的问题。</p><h4 id="二、解决办法-2" tabindex="-1"><a class="header-anchor" href="#二、解决办法-2" aria-hidden="true">#</a> 二、解决办法</h4><p><strong>①、设置有效期均匀分布</strong></p><p>避免缓存设置相近的有效期，我们可以在设置有效期时增加随机值；</p><p>或者统一规划有效期，使得过期时间均匀分布。</p><p><strong>②、数据预热</strong></p><p>对于即将来临的大量请求，我们可以提前走一遍系统，将数据提前缓存在Redis中，并设置不同的过期时间。</p><p><strong>③、保证Redis服务高可用</strong></p><p>前面我们介绍过Redis的哨兵模式和集群模式，为防止Redis集群单节点故障，可以通过这两种模式实现高可用。</p><h2 id="布隆过滤器" tabindex="-1"><a class="header-anchor" href="#布隆过滤器" aria-hidden="true">#</a> 布隆过滤器</h2><h3 id="_1、布隆过滤器使用场景" tabindex="-1"><a class="header-anchor" href="#_1、布隆过滤器使用场景" aria-hidden="true">#</a> 1、布隆过滤器使用场景</h3><p>比如有如下几个需求：</p><p>①、原本有10亿个号码，现在又来了10万个号码，要快速准确判断这10万个号码是否在10亿个号码库中？</p><p>解决办法一：将10亿个号码存入数据库中，进行数据库查询，准确性有了，但是速度会比较慢。</p><p>解决办法二：将10亿号码放入内存中，比如Redis缓存中，这里我们算一下占用内存大小：10亿*8字节=8GB，通过内存查询，准确性和速度都有了，但是大约8gb的内存空间，挺浪费内存空间的。</p><p>②、接触过爬虫的，应该有这么一个需求，需要爬虫的网站千千万万，对于一个新的网站url，我们如何判断这个url我们是否已经爬过了？</p><p>解决办法还是上面的两种，很显然，都不太好。</p><p>③、同理还有垃圾邮箱的过滤。</p><p>那么对于类似这种，大数据量集合，如何准确快速的判断某个数据是否在大数据量集合中，并且不占用内存，<strong>布隆过滤器</strong>应运而生了。</p><h3 id="_2、布隆过滤器简介" tabindex="-1"><a class="header-anchor" href="#_2、布隆过滤器简介" aria-hidden="true">#</a> 2、布隆过滤器简介</h3><p>带着上面的几个疑问，我们来看看到底什么是布隆过滤器。</p><p>布隆过滤器：一种数据结构，是由一串很长的二进制向量组成，可以将其看成一个二进制数组。既然是二进制，那么里面存放的不是0，就是1，但是初始默认值都是0。</p><p>如下所示：</p><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>①、添加数据</strong></p><p>介绍概念的时候，我们说可以将布隆过滤器看成一个容器，那么如何向布隆过滤器中添加一个数据呢？</p><p>如下图所示：当要向布隆过滤器中添加一个元素key时，我们通过多个hash函数，算出一个值，然后将这个值所在的方格置为1。</p><p>比如，下图hash1(key)=1，那么在第2个格子将0变为1（数组是从0开始计数的），hash2(key)=7，那么将第8个格子置位1，依次类推。</p><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>②、判断数据是否存在？</strong></p><p>知道了如何向布隆过滤器中添加一个数据，那么新来一个数据，我们如何判断其是否存在于这个布隆过滤器中呢？</p><p>很简单，我们只需要将这个新的数据通过上面自定义的几个哈希函数，分别算出各个值，然后看其对应的地方是否都是1，如果存在一个不是1的情况，那么我们可以说，该新数据一定不存在于这个布隆过滤器中。</p><p>反过来说，如果通过哈希函数算出来的值，对应的地方都是1，那么我们能够肯定的得出：这个数据一定存在于这个布隆过滤器中吗？</p><p>答案是否定的，因为多个不同的数据通过hash函数算出来的结果是会有重复的，所以会存在某个位置是别的数据通过hash函数置为的1。</p><p>我们可以得到一个结论：<strong>布隆过滤器可以判断某个数据一定不存在，但是无法判断一定存在</strong>。</p><p><strong>③、布隆过滤器优缺点</strong></p><p>优点：优点很明显，二进制组成的数组，占用内存极少，并且插入和查询速度都足够快。</p><p>缺点：随着数据的增加，误判率会增加；还有无法判断数据一定存在；另外还有一个重要缺点，无法删除数据。</p><h3 id="_3、redis实现布隆过滤器" tabindex="-1"><a class="header-anchor" href="#_3、redis实现布隆过滤器" aria-hidden="true">#</a> 3、Redis实现布隆过滤器</h3><h4 id="_1、bitmaps" tabindex="-1"><a class="header-anchor" href="#_1、bitmaps" aria-hidden="true">#</a> ①、bitmaps</h4><p>我们知道计算机是以二进制位作为底层存储的基础单位，一个字节等于8位。</p><p>比如“big”字符串是由三个字符组成的，这三个字符对应的ASCII码分为是98、105、103，对应的二进制存储如下：</p><figure><img src="'+f+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在Redis中，Bitmaps 提供了一套命令用来操作类似上面字符串中的每一个位。</p><p><strong>一、设置值</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>setbit key offset value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+y+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们知道&quot;b&quot;的二进制表示为0110 0010，我们将第7位（从0开始）设置为1，那0110 0011 表示的就是字符“c”，所以最后的字符 “big”变成了“cig”。</p><p><strong>二、获取值</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gitbit key offset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+_+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>三、获取位图指定范围值为1的个数</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bitcount key [start end]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不指定，那就是获取全部值为1的个数。</p><p>注意：start和end指定的是<strong>字节的个数</strong>，而不是位数组下标。</p><figure><img src="`+x+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_2、redisson" tabindex="-1"><a class="header-anchor" href="#_2、redisson" aria-hidden="true">#</a> ②、Redisson</h4><p>Redis 实现布隆过滤器的底层就是通过 bitmap 这种数据结构，至于如何实现，这里就不重复造轮子了，介绍业界比较好用的一个客户端工具——Redisson。</p><p>Redisson 是用于在 Java 程序中操作 Redis 的库，利用Redisson 我们可以在程序中轻松地使用 Redis。</p><p>下面我们就通过 Redisson 来构造布隆过滤器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ys<span class="token punctuation">.</span>rediscluster<span class="token punctuation">.</span>bloomfilter<span class="token punctuation">.</span>redisson</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span></span><span class="token class-name">Redisson</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RBloomFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RedissonClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">Config</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonBloomFilter</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;redis://192.168.14.104:6379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//构造Redisson</span>
        <span class="token class-name">RedissonClient</span> redisson <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">RBloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">&quot;phoneList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//初始化布隆过滤器：预计元素为100000000L,误差率为3%</span>
        bloomFilter<span class="token punctuation">.</span><span class="token function">tryInit</span><span class="token punctuation">(</span><span class="token number">100000000L</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将号码10086插入到布隆过滤器中</span>
        bloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//判断下面号码是否在布隆过滤器中</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是单节点的Redis实现方式，如果数据量比较大，期望的误差率又很低，那单节点所提供的内存是无法满足的，这时候可以使用分布式布隆过滤器，同样也可以用 Redisson 来实现，这里我就不做代码演示了，大家有兴趣可以试试。</p><h3 id="_4、guava-工具" tabindex="-1"><a class="header-anchor" href="#_4、guava-工具" aria-hidden="true">#</a> 4、guava 工具</h3><p>最后提一下不用Redis如何来实现布隆过滤器。</p><p>guava 工具包相信大家都用过，这是谷歌公司提供的，里面也提供了布隆过滤器的实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ys<span class="token punctuation">.</span>rediscluster<span class="token punctuation">.</span>bloomfilter</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Charsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span></span><span class="token class-name">BloomFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span></span><span class="token class-name">Funnel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span></span><span class="token class-name">Funnels</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuavaBloomFilter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Funnels</span><span class="token punctuation">.</span><span class="token function">stringFunnel</span><span class="token punctuation">(</span><span class="token class-name">Charsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        bloomFilter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token string">&quot;10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理" aria-hidden="true">#</a> 底层原理</h2><h2 id="lua脚本" tabindex="-1"><a class="header-anchor" href="#lua脚本" aria-hidden="true">#</a> LUA脚本</h2><h2 id="为什么说redis是单线程的以及redis为什么这么快" tabindex="-1"><a class="header-anchor" href="#为什么说redis是单线程的以及redis为什么这么快" aria-hidden="true">#</a> 为什么说Redis是单线程的以及Redis为什么这么快！</h2>`,73),S={href:"https://blog.csdn.net/chenyao1994/article/details/79491337",target:"_blank",rel:"noopener noreferrer"};function O(F,D){const a=o("ExternalLinkIcon");return l(),c("div",null,[w,n("p",null,[s("参考："),n("a",q,[s("https://www.cnblogs.com/ysocean/tag/Redis详解/"),e(a)])]),U,n("p",null,[s("互斥锁简单来说就是在Redis中根据key获得的value值为空时，先锁上，然后从数据库加载，加载完毕，释放锁。若其他线程也在请求该key时，发现获取锁失败，则睡眠一段时间（比如100ms）后重试。也可以使用双重检测同步锁："),n("a",E,[s("https://blog.csdn.net/weixin_42857269/article/details/120181414"),e(a)])]),z,n("p",null,[n("a",S,[s("https://blog.csdn.net/chenyao1994/article/details/79491337"),e(a)])])])}const K=i(R,[["render",O],["__file","Redis进阶.html.vue"]]);export{K as default};
